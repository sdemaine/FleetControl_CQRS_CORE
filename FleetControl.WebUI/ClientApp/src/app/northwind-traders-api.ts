/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.17.0 (NJsonSchema v9.13.26.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICategoriesClient {
    getCategoryPreview(categoryId: number): Observable<CategoryPreviewDto[] | null>;
}

@Injectable()
export class CategoriesClient implements ICategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCategoryPreview(categoryId: number): Observable<CategoryPreviewDto[] | null> {
        let url_ = this.baseUrl + "/api/Categories/GetCategoryPreview?";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined and cannot be null.");
        else
            url_ += "CategoryId=" + encodeURIComponent("" + categoryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategoryPreview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategoryPreview(<any>response_);
                } catch (e) {
                    return <Observable<CategoryPreviewDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoryPreviewDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategoryPreview(response: HttpResponseBase): Observable<CategoryPreviewDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryPreviewDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryPreviewDto[] | null>(<any>null);
    }
}

export interface ICustomersClient {
    getAll(): Observable<NorthwindCustomersListViewModel | null>;
    create(command: CreateNorthwindCustomerCommand): Observable<void>;
    get(id: string | null): Observable<NorthwindCustomerDetailModel | null>;
    update(id: string, command: UpdateNorthwindCustomerCommand): Observable<void>;
    delete(id: string | null): Observable<void>;
    getOrders(customerId: string | null): Observable<NorthwindCustomerOrderListViewModel | null>;
}

@Injectable()
export class CustomersClient implements ICustomersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<NorthwindCustomersListViewModel | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<NorthwindCustomersListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<NorthwindCustomersListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<NorthwindCustomersListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NorthwindCustomersListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NorthwindCustomersListViewModel | null>(<any>null);
    }

    create(command: CreateNorthwindCustomerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = resultDatadefault ? ProblemDetails.fromJS(resultDatadefault) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: string | null): Observable<NorthwindCustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<NorthwindCustomerDetailModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<NorthwindCustomerDetailModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<NorthwindCustomerDetailModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NorthwindCustomerDetailModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NorthwindCustomerDetailModel | null>(<any>null);
    }

    update(id: string, command: UpdateNorthwindCustomerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: string | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getOrders(customerId: string | null): Observable<NorthwindCustomerOrderListViewModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{customerId}/orders";
        if (customerId === undefined || customerId === null)
            throw new Error("The parameter 'customerId' must be defined.");
        url_ = url_.replace("{customerId}", encodeURIComponent("" + customerId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrders(<any>response_);
                } catch (e) {
                    return <Observable<NorthwindCustomerOrderListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<NorthwindCustomerOrderListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrders(response: HttpResponseBase): Observable<NorthwindCustomerOrderListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NorthwindCustomerOrderListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NorthwindCustomerOrderListViewModel | null>(<any>null);
    }
}

export interface IFleetCustomersClient {
    getAll(): Observable<FleetCustomersListViewModel | null>;
    get(id: string | null): Observable<FleetCustomerDetailModel | null>;
}

@Injectable()
export class FleetCustomersClient implements IFleetCustomersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<FleetCustomersListViewModel | null> {
        let url_ = this.baseUrl + "/api/FleetCustomers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<FleetCustomersListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FleetCustomersListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<FleetCustomersListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FleetCustomersListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FleetCustomersListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<FleetCustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/FleetCustomers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FleetCustomerDetailModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FleetCustomerDetailModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FleetCustomerDetailModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FleetCustomerDetailModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? ProblemDetails.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FleetCustomerDetailModel | null>(<any>null);
    }
}

export interface IProductsClient {
    getAll(): Observable<NorthwindProductsListViewModel | null>;
    get(id: number): Observable<ProductViewModel | null>;
    create(command: CreateNorthwindProductCommand): Observable<number>;
    update(command: UpdateNorthwindProductCommand): Observable<void>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<NorthwindProductsListViewModel | null> {
        let url_ = this.baseUrl + "/api/Products/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<NorthwindProductsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<NorthwindProductsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<NorthwindProductsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NorthwindProductsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NorthwindProductsListViewModel | null>(<any>null);
    }

    get(id: number): Observable<ProductViewModel | null> {
        let url_ = this.baseUrl + "/api/Products/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ProductViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProductViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductViewModel | null>(<any>null);
    }

    create(command: CreateNorthwindProductCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Products/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(command: UpdateNorthwindProductCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = resultDatadefault ? ProblemDetails.fromJS(resultDatadefault) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = resultDatadefault ? ProblemDetails.fromJS(resultDatadefault) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

export class CategoryPreviewDto implements ICategoryPreviewDto {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    products?: ProductPreviewDto[] | undefined;

    constructor(data?: ICategoryPreviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.description = data["description"];
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductPreviewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryPreviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryPreviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["description"] = this.description;
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategoryPreviewDto {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    products?: ProductPreviewDto[] | undefined;
}

export class ProductPreviewDto implements IProductPreviewDto {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;

    constructor(data?: IProductPreviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
        }
    }

    static fromJS(data: any): ProductPreviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPreviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        return data; 
    }
}

export interface IProductPreviewDto {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
}

export class NorthwindCustomersListViewModel implements INorthwindCustomersListViewModel {
    customers?: NorthwindCustomerLookupModel[] | undefined;

    constructor(data?: INorthwindCustomersListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["customers"] && data["customers"].constructor === Array) {
                this.customers = [] as any;
                for (let item of data["customers"])
                    this.customers!.push(NorthwindCustomerLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NorthwindCustomersListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindCustomersListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.customers && this.customers.constructor === Array) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface INorthwindCustomersListViewModel {
    customers?: NorthwindCustomerLookupModel[] | undefined;
}

export class NorthwindCustomerLookupModel implements INorthwindCustomerLookupModel {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: INorthwindCustomerLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): NorthwindCustomerLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindCustomerLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface INorthwindCustomerLookupModel {
    id?: string | undefined;
    name?: string | undefined;
}

export class NorthwindCustomerDetailModel implements INorthwindCustomerDetailModel {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: INorthwindCustomerDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): NorthwindCustomerDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindCustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface INorthwindCustomerDetailModel {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class NorthwindCustomerOrderListViewModel implements INorthwindCustomerOrderListViewModel {
    customerOrders?: NorthwindOrderDto[] | undefined;
    createEnabled?: boolean;

    constructor(data?: INorthwindCustomerOrderListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["customerOrders"] && data["customerOrders"].constructor === Array) {
                this.customerOrders = [] as any;
                for (let item of data["customerOrders"])
                    this.customerOrders!.push(NorthwindOrderDto.fromJS(item));
            }
            this.createEnabled = data["createEnabled"];
        }
    }

    static fromJS(data: any): NorthwindCustomerOrderListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindCustomerOrderListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.customerOrders && this.customerOrders.constructor === Array) {
            data["customerOrders"] = [];
            for (let item of this.customerOrders)
                data["customerOrders"].push(item.toJSON());
        }
        data["createEnabled"] = this.createEnabled;
        return data; 
    }
}

export interface INorthwindCustomerOrderListViewModel {
    customerOrders?: NorthwindOrderDto[] | undefined;
    createEnabled?: boolean;
}

export class NorthwindOrderDto implements INorthwindOrderDto {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: INorthwindOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.customerId = data["customerId"];
            this.employeeId = data["employeeId"];
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
            if (data["orderDetails"] && data["orderDetails"].constructor === Array) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NorthwindOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["customerId"] = this.customerId;
        data["employeeId"] = this.employeeId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        if (this.orderDetails && this.orderDetails.constructor === Array) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface INorthwindOrderDto {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class OrderDetail implements IOrderDetail {
    orderId?: number;
    productId?: number;
    unitPrice?: number;
    quantity?: number;
    discount?: number;
    order?: Order | undefined;
    product?: Product | undefined;

    constructor(data?: IOrderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.productId = data["productId"];
            this.unitPrice = data["unitPrice"];
            this.quantity = data["quantity"];
            this.discount = data["discount"];
            this.order = data["order"] ? Order.fromJS(data["order"]) : <any>undefined;
            this.product = data["product"] ? Product.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["discount"] = this.discount;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderDetail {
    orderId?: number;
    productId?: number;
    unitPrice?: number;
    quantity?: number;
    discount?: number;
    order?: Order | undefined;
    product?: Product | undefined;
}

export class Order implements IOrder {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    customer?: Customer | undefined;
    employee?: Employee | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.customerId = data["customerId"];
            this.employeeId = data["employeeId"];
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = data["requiredDate"] ? new Date(data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = data["shipVia"];
            this.freight = data["freight"];
            this.shipName = data["shipName"];
            this.shipAddress = data["shipAddress"];
            this.shipCity = data["shipCity"];
            this.shipRegion = data["shipRegion"];
            this.shipPostalCode = data["shipPostalCode"];
            this.shipCountry = data["shipCountry"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : <any>undefined;
            this.employee = data["employee"] ? Employee.fromJS(data["employee"]) : <any>undefined;
            this.shipper = data["shipper"] ? Shipper.fromJS(data["shipper"]) : <any>undefined;
            if (data["orderDetails"] && data["orderDetails"].constructor === Array) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["customerId"] = this.customerId;
        data["employeeId"] = this.employeeId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["shipper"] = this.shipper ? this.shipper.toJSON() : <any>undefined;
        if (this.orderDetails && this.orderDetails.constructor === Array) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrder {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
    customer?: Customer | undefined;
    employee?: Employee | undefined;
    shipper?: Shipper | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class Customer implements ICustomer {
    customerId?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    orders?: Order[] | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.phone = data["phone"];
            this.fax = data["fax"];
            if (data["orders"] && data["orders"].constructor === Array) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        if (this.orders && this.orders.constructor === Array) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICustomer {
    customerId?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    orders?: Order[] | undefined;
}

export class Employee implements IEmployee {
    employeeId?: number;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: string | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;
    manager?: Employee | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
    directReports?: Employee[] | undefined;
    orders?: Order[] | undefined;

    constructor(data?: IEmployee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.employeeId = data["employeeId"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.title = data["title"];
            this.titleOfCourtesy = data["titleOfCourtesy"];
            this.birthDate = data["birthDate"] ? new Date(data["birthDate"].toString()) : <any>undefined;
            this.hireDate = data["hireDate"] ? new Date(data["hireDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.homePhone = data["homePhone"];
            this.extension = data["extension"];
            this.photo = data["photo"];
            this.notes = data["notes"];
            this.reportsTo = data["reportsTo"];
            this.photoPath = data["photoPath"];
            this.manager = data["manager"] ? Employee.fromJS(data["manager"]) : <any>undefined;
            if (data["employeeTerritories"] && data["employeeTerritories"].constructor === Array) {
                this.employeeTerritories = [] as any;
                for (let item of data["employeeTerritories"])
                    this.employeeTerritories!.push(EmployeeTerritory.fromJS(item));
            }
            if (data["directReports"] && data["directReports"].constructor === Array) {
                this.directReports = [] as any;
                for (let item of data["directReports"])
                    this.directReports!.push(Employee.fromJS(item));
            }
            if (data["orders"] && data["orders"].constructor === Array) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employee {
        data = typeof data === 'object' ? data : {};
        let result = new Employee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["title"] = this.title;
        data["titleOfCourtesy"] = this.titleOfCourtesy;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["extension"] = this.extension;
        data["photo"] = this.photo;
        data["notes"] = this.notes;
        data["reportsTo"] = this.reportsTo;
        data["photoPath"] = this.photoPath;
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        if (this.employeeTerritories && this.employeeTerritories.constructor === Array) {
            data["employeeTerritories"] = [];
            for (let item of this.employeeTerritories)
                data["employeeTerritories"].push(item.toJSON());
        }
        if (this.directReports && this.directReports.constructor === Array) {
            data["directReports"] = [];
            for (let item of this.directReports)
                data["directReports"].push(item.toJSON());
        }
        if (this.orders && this.orders.constructor === Array) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEmployee {
    employeeId?: number;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: string | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;
    manager?: Employee | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
    directReports?: Employee[] | undefined;
    orders?: Order[] | undefined;
}

export class EmployeeTerritory implements IEmployeeTerritory {
    employeeId?: number;
    territoryId?: string | undefined;
    employee?: Employee | undefined;
    territory?: Territory | undefined;

    constructor(data?: IEmployeeTerritory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.employeeId = data["employeeId"];
            this.territoryId = data["territoryId"];
            this.employee = data["employee"] ? Employee.fromJS(data["employee"]) : <any>undefined;
            this.territory = data["territory"] ? Territory.fromJS(data["territory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeTerritory {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeTerritory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["territoryId"] = this.territoryId;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["territory"] = this.territory ? this.territory.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEmployeeTerritory {
    employeeId?: number;
    territoryId?: string | undefined;
    employee?: Employee | undefined;
    territory?: Territory | undefined;
}

export class Territory implements ITerritory {
    territoryId?: string | undefined;
    territoryDescription?: string | undefined;
    regionId?: number;
    region?: Region | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;

    constructor(data?: ITerritory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.territoryId = data["territoryId"];
            this.territoryDescription = data["territoryDescription"];
            this.regionId = data["regionId"];
            this.region = data["region"] ? Region.fromJS(data["region"]) : <any>undefined;
            if (data["employeeTerritories"] && data["employeeTerritories"].constructor === Array) {
                this.employeeTerritories = [] as any;
                for (let item of data["employeeTerritories"])
                    this.employeeTerritories!.push(EmployeeTerritory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Territory {
        data = typeof data === 'object' ? data : {};
        let result = new Territory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["territoryId"] = this.territoryId;
        data["territoryDescription"] = this.territoryDescription;
        data["regionId"] = this.regionId;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        if (this.employeeTerritories && this.employeeTerritories.constructor === Array) {
            data["employeeTerritories"] = [];
            for (let item of this.employeeTerritories)
                data["employeeTerritories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITerritory {
    territoryId?: string | undefined;
    territoryDescription?: string | undefined;
    regionId?: number;
    region?: Region | undefined;
    employeeTerritories?: EmployeeTerritory[] | undefined;
}

export class Region implements IRegion {
    regionId?: number;
    regionDescription?: string | undefined;
    territories?: Territory[] | undefined;

    constructor(data?: IRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.regionId = data["regionId"];
            this.regionDescription = data["regionDescription"];
            if (data["territories"] && data["territories"].constructor === Array) {
                this.territories = [] as any;
                for (let item of data["territories"])
                    this.territories!.push(Territory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Region {
        data = typeof data === 'object' ? data : {};
        let result = new Region();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["regionDescription"] = this.regionDescription;
        if (this.territories && this.territories.constructor === Array) {
            data["territories"] = [];
            for (let item of this.territories)
                data["territories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRegion {
    regionId?: number;
    regionDescription?: string | undefined;
    territories?: Territory[] | undefined;
}

export class Shipper implements IShipper {
    shipperId?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;

    constructor(data?: IShipper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shipperId = data["shipperId"];
            this.companyName = data["companyName"];
            this.phone = data["phone"];
            if (data["orders"] && data["orders"].constructor === Array) {
                this.orders = [] as any;
                for (let item of data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Shipper {
        data = typeof data === 'object' ? data : {};
        let result = new Shipper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipperId"] = this.shipperId;
        data["companyName"] = this.companyName;
        data["phone"] = this.phone;
        if (this.orders && this.orders.constructor === Array) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IShipper {
    shipperId?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;
}

export class Product implements IProduct {
    productId?: number;
    productName?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;
    category?: Category | undefined;
    supplier?: Supplier | undefined;
    orderDetails?: OrderDetail[] | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.quantityPerUnit = data["quantityPerUnit"];
            this.unitPrice = data["unitPrice"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.reorderLevel = data["reorderLevel"];
            this.discontinued = data["discontinued"];
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>undefined;
            this.supplier = data["supplier"] ? Supplier.fromJS(data["supplier"]) : <any>undefined;
            if (data["orderDetails"] && data["orderDetails"].constructor === Array) {
                this.orderDetails = [] as any;
                for (let item of data["orderDetails"])
                    this.orderDetails!.push(OrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["quantityPerUnit"] = this.quantityPerUnit;
        data["unitPrice"] = this.unitPrice;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["reorderLevel"] = this.reorderLevel;
        data["discontinued"] = this.discontinued;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["supplier"] = this.supplier ? this.supplier.toJSON() : <any>undefined;
        if (this.orderDetails && this.orderDetails.constructor === Array) {
            data["orderDetails"] = [];
            for (let item of this.orderDetails)
                data["orderDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProduct {
    productId?: number;
    productName?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;
    category?: Category | undefined;
    supplier?: Supplier | undefined;
    orderDetails?: OrderDetail[] | undefined;
}

export class Category implements ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
    products?: Product[] | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.description = data["description"];
            this.picture = data["picture"];
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["description"] = this.description;
        data["picture"] = this.picture;
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    picture?: string | undefined;
    products?: Product[] | undefined;
}

export class Supplier implements ISupplier {
    supplierId?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;

    constructor(data?: ISupplier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.supplierId = data["supplierId"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.address = data["address"];
            this.city = data["city"];
            this.region = data["region"];
            this.postalCode = data["postalCode"];
            this.country = data["country"];
            this.phone = data["phone"];
            this.fax = data["fax"];
            this.homePage = data["homePage"];
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Supplier {
        data = typeof data === 'object' ? data : {};
        let result = new Supplier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplierId"] = this.supplierId;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["homePage"] = this.homePage;
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISupplier {
    supplierId?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;
}

export class CreateNorthwindCustomerCommand implements ICreateNorthwindCustomerCommand {
    customerId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: ICreateNorthwindCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): CreateNorthwindCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNorthwindCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface ICreateNorthwindCustomerCommand {
    customerId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class UpdateNorthwindCustomerCommand implements IUpdateNorthwindCustomerCommand {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;

    constructor(data?: IUpdateNorthwindCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.address = data["address"];
            this.city = data["city"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.contactTitle = data["contactTitle"];
            this.country = data["country"];
            this.fax = data["fax"];
            this.phone = data["phone"];
            this.postalCode = data["postalCode"];
            this.region = data["region"];
        }
    }

    static fromJS(data: any): UpdateNorthwindCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNorthwindCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["city"] = this.city;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["country"] = this.country;
        data["fax"] = this.fax;
        data["phone"] = this.phone;
        data["postalCode"] = this.postalCode;
        data["region"] = this.region;
        return data; 
    }
}

export interface IUpdateNorthwindCustomerCommand {
    id?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    country?: string | undefined;
    fax?: string | undefined;
    phone?: string | undefined;
    postalCode?: string | undefined;
    region?: string | undefined;
}

export class FleetCustomersListViewModel implements IFleetCustomersListViewModel {
    customers?: FleetCustomerLookupModel[] | undefined;

    constructor(data?: IFleetCustomersListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["customers"] && data["customers"].constructor === Array) {
                this.customers = [] as any;
                for (let item of data["customers"])
                    this.customers!.push(FleetCustomerLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FleetCustomersListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FleetCustomersListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.customers && this.customers.constructor === Array) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFleetCustomersListViewModel {
    customers?: FleetCustomerLookupModel[] | undefined;
}

export class FleetCustomerLookupModel implements IFleetCustomerLookupModel {
    id?: number;
    name?: string | undefined;

    constructor(data?: IFleetCustomerLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): FleetCustomerLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new FleetCustomerLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IFleetCustomerLookupModel {
    id?: number;
    name?: string | undefined;
}

export class FleetCustomerDetailModel implements IFleetCustomerDetailModel {
    id?: number;

    constructor(data?: IFleetCustomerDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): FleetCustomerDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new FleetCustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IFleetCustomerDetailModel {
    id?: number;
}

export class NorthwindProductsListViewModel implements INorthwindProductsListViewModel {
    products?: ProductDto[] | undefined;
    createEnabled?: boolean;

    constructor(data?: INorthwindProductsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductDto.fromJS(item));
            }
            this.createEnabled = data["createEnabled"];
        }
    }

    static fromJS(data: any): NorthwindProductsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new NorthwindProductsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["createEnabled"] = this.createEnabled;
        return data; 
    }
}

export interface INorthwindProductsListViewModel {
    products?: ProductDto[] | undefined;
    createEnabled?: boolean;
}

export class ProductDto implements IProductDto {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.supplierCompanyName = data["supplierCompanyName"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["supplierCompanyName"] = this.supplierCompanyName;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface IProductDto {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
}

export class ProductViewModel implements IProductViewModel {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
    editEnabled?: boolean;
    deleteEnabled?: boolean;

    constructor(data?: IProductViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.supplierCompanyName = data["supplierCompanyName"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.discontinued = data["discontinued"];
            this.editEnabled = data["editEnabled"];
            this.deleteEnabled = data["deleteEnabled"];
        }
    }

    static fromJS(data: any): ProductViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["supplierCompanyName"] = this.supplierCompanyName;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["discontinued"] = this.discontinued;
        data["editEnabled"] = this.editEnabled;
        data["deleteEnabled"] = this.deleteEnabled;
        return data; 
    }
}

export interface IProductViewModel {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    supplierCompanyName?: string | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
    discontinued?: boolean;
    editEnabled?: boolean;
    deleteEnabled?: boolean;
}

export class CreateNorthwindProductCommand implements ICreateNorthwindProductCommand {
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;

    constructor(data?: ICreateNorthwindProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): CreateNorthwindProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNorthwindProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface ICreateNorthwindProductCommand {
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;
}

export class UpdateNorthwindProductCommand implements IUpdateNorthwindProductCommand {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;

    constructor(data?: IUpdateNorthwindProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.supplierId = data["supplierId"];
            this.categoryId = data["categoryId"];
            this.discontinued = data["discontinued"];
        }
    }

    static fromJS(data: any): UpdateNorthwindProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNorthwindProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["discontinued"] = this.discontinued;
        return data; 
    }
}

export interface IUpdateNorthwindProductCommand {
    productId?: number;
    productName?: string | undefined;
    unitPrice?: number | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    discontinued?: boolean;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}