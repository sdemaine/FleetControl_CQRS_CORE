// <auto-generated />
using System;
using FleetControl.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FleetControl.WebUI.Migrations
{
    [DbContext(typeof(FleetControlDbContext))]
    [Migration("20190903010757_Added ApplicatioUser")]
    partial class AddedApplicatioUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FleetControl.Domain.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEventId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuditEventId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("FleetControl.Domain.AuditDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("KeyCaption")
                        .HasMaxLength(100);

                    b.Property<string>("KeyDataType")
                        .HasMaxLength(100);

                    b.Property<string>("KeyTable")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ValueCaption")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ValueDataType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AuditDataType");
                });

            modelBuilder.Entity("FleetControl.Domain.AuditDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditDataTypeId");

                    b.Property<int>("AuditId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Key");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AuditDataTypeId");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.AuditEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AuditEvent");
                });

            modelBuilder.Entity("FleetControl.Domain.AuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEventId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuditEventId");

                    b.ToTable("AuditHistory");
                });

            modelBuilder.Entity("FleetControl.Domain.AuditHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditDataTypeId");

                    b.Property<int>("AuditHistoryId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Key");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AuditDataTypeId");

                    b.HasIndex("AuditHistoryId");

                    b.ToTable("AuditHistoryDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.BusinessAssociate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbreviatedName");

                    b.Property<int>("BAID");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsFleetControlBAID");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("BusinessAssociate");
                });

            modelBuilder.Entity("FleetControl.Domain.BusinessHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ClosedFriday");

                    b.Property<bool>("ClosedMonday");

                    b.Property<bool>("ClosedSaturday");

                    b.Property<bool>("ClosedSunday");

                    b.Property<bool>("ClosedThursday");

                    b.Property<bool>("ClosedTuesday");

                    b.Property<bool>("ClosedWednesday");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Friday24Hours");

                    b.Property<string>("FridayClose");

                    b.Property<string>("FridayOpen");

                    b.Property<bool>("Monday24Hours");

                    b.Property<string>("MondayClose");

                    b.Property<string>("MondayOpen");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Saturday24Hours");

                    b.Property<string>("SaturdayClose");

                    b.Property<string>("SaturdayOpen");

                    b.Property<bool>("Sunday24Hours");

                    b.Property<string>("SundayClose");

                    b.Property<string>("SundayOpen");

                    b.Property<bool>("Thursday24Hours");

                    b.Property<string>("ThursdayClose");

                    b.Property<string>("ThursdayOpen");

                    b.Property<bool>("Tuesday24Hours");

                    b.Property<string>("TuesdayClose");

                    b.Property<string>("TuesdayOpen");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<bool>("Wednesday24Hours");

                    b.Property<string>("WednesdayClose");

                    b.Property<string>("WednesdayOpen");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");
                });

            modelBuilder.Entity("FleetControl.Domain.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int?>("CardAddressId");

                    b.Property<int?>("CardClassId");

                    b.Property<int>("CardEntityType")
                        .HasColumnName("EntityType");

                    b.Property<DateTime?>("CardExpirationDate");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<int?>("CardNo");

                    b.Property<int>("CardPromptPattern");

                    b.Property<int>("CardType");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<int?>("ClassId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DAMCardStatusIndicator");

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int>("DailyTransactionLimitMode");

                    b.Property<DateTime?>("Date1stPur");

                    b.Property<int?>("DriverId");

                    b.Property<string>("EmbossLine1");

                    b.Property<string>("EmbossLine2");

                    b.Property<string>("EmbossLine3");

                    b.Property<string>("EmbossedCardNumber")
                        .HasMaxLength(15);

                    b.Property<int>("EmbossingElement1");

                    b.Property<int>("EmbossingElement2");

                    b.Property<int>("EmbossingElement3");

                    b.Property<bool>("ExistsInVoyager");

                    b.Property<string>("ExternalCardId");

                    b.Property<DateTime?>("ExternalDeleteDate");

                    b.Property<int>("FormerDriverId");

                    b.Property<int>("FormerVehicleId");

                    b.Property<bool>("IsConsignment");

                    b.Property<bool>("IsFuelMaster");

                    b.Property<bool>("IsVoyager");

                    b.Property<bool>("IsWinC6");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonsAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerBillingCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int>("MonthlyTransactionLimitMode");

                    b.Property<int?>("OdometerLimit");

                    b.Property<int>("OdometerValidation");

                    b.Property<int>("OdometerValidationMode");

                    b.Property<int?>("PinNumber");

                    b.Property<int>("ProductUse");

                    b.Property<int>("PurchaseDay");

                    b.Property<int>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<int?>("PurchaseTimeBand1Mode");

                    b.Property<int?>("PurchaseTimeBand2Mode");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<int>("RestrictionCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.Property<bool?>("SubmitPending");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirCardNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("TransactionDollarLimit");

                    b.Property<int>("TransactionDollarLimitMode");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int>("WeeklyTransactionLimitMode");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("FleetControl.Domain.CardAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(75);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(75);

                    b.Property<string>("City")
                        .HasMaxLength(25);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("ExternalAddressId");

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<int>("Status");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9);

                    b.HasKey("Id");

                    b.ToTable("CardAddress");
                });

            modelBuilder.Entity("FleetControl.Domain.CardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CardCategory");
                });

            modelBuilder.Entity("FleetControl.Domain.CardClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountNumber");

                    b.Property<string>("Class");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<double>("MaxFuel");

                    b.Property<double>("MaxRange");

                    b.Property<double>("MinRange");

                    b.Property<int?>("ProductId");

                    b.Property<string>("ProductsNotAllowed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CardClass");
                });

            modelBuilder.Entity("FleetControl.Domain.CardImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("CardEntityType")
                        .HasColumnName("EntityType");

                    b.Property<DateTime?>("CardExpirationDate");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardNo")
                        .HasMaxLength(10);

                    b.Property<int>("CardPromptPattern");

                    b.Property<string>("CardType")
                        .HasMaxLength(25);

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<int?>("ClassId");

                    b.Property<bool>("CopyRecord");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DAMCardStatusIndicator");

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int?>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int?>("DailyTransactionLimitMode");

                    b.Property<DateTime?>("Date1stPur");

                    b.Property<string>("Dept");

                    b.Property<int?>("DriverId");

                    b.Property<string>("EmbossedCardNumber")
                        .HasMaxLength(15);

                    b.Property<int>("ExternalCardId");

                    b.Property<int>("FormerDriverId");

                    b.Property<int>("FormerVehicleId");

                    b.Property<bool>("IsConsignment");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonsAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerBillingCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int?>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int?>("MonthlyTransactionLimitMode");

                    b.Property<int?>("OdometerLimit");

                    b.Property<int>("OdometerValidation");

                    b.Property<int?>("OdometerValidationMode");

                    b.Property<int?>("PinNumber");

                    b.Property<int>("ProductUse");

                    b.Property<int>("PurchaseDay");

                    b.Property<int?>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<int?>("PurchaseTimeBand1Mode");

                    b.Property<int?>("PurchaseTimeBand2Mode");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<int>("RestrictionCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.Property<int>("SyncStatus");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirCardNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("TransactionDollarLimit");

                    b.Property<int?>("TransactionDollarLimitMode");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("VehicleImportId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int?>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int?>("WeeklyTransactionLimitMode");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleImportId");

                    b.ToTable("CardImport");
                });

            modelBuilder.Entity("FleetControl.Domain.CardNumberRegistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber");

                    b.Property<int>("CardType");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CardNumberRegistry");
                });

            modelBuilder.Entity("FleetControl.Domain.CardPinRegistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("PinNumber");

                    b.Property<int>("PinType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CardPinRegistry");
                });

            modelBuilder.Entity("FleetControl.Domain.ContractTaxLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractTaxLocaleId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrentTaxLocationId");

                    b.Property<DateTime>("FromDate");

                    b.Property<int>("PricingLocationGroupId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("ToDate");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ContractTaxLocation");
                });

            modelBuilder.Entity("FleetControl.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Address2")
                        .HasMaxLength(35);

                    b.Property<int>("BAID");

                    b.Property<string>("BillingCode")
                        .HasMaxLength(1);

                    b.Property<string>("BillingFrequency")
                        .HasMaxLength(1);

                    b.Property<int?>("CardAddressId");

                    b.Property<int>("CardPromptPattern");

                    b.Property<int>("CardsTiedToEntity");

                    b.Property<string>("City")
                        .HasMaxLength(15);

                    b.Property<int>("CompanySelectsCardNumber");

                    b.Property<int>("CompanySelectsDriverNumber");

                    b.Property<int>("CompanySelectsPin");

                    b.Property<int>("CompanySelectsVehicleNumber");

                    b.Property<string>("Contact")
                        .HasMaxLength(25);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CreditLimit")
                        .HasColumnName("CredLimit");

                    b.Property<string>("CustNo");

                    b.Property<string>("CustomerName")
                        .HasColumnName("CustName")
                        .HasMaxLength(100);

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int>("DailyTransactionLimitMode");

                    b.Property<int>("DepartmentRequired");

                    b.Property<int>("DepartmentRequiredForCard");

                    b.Property<int>("DepartmentRequiredForDriver");

                    b.Property<int>("DepartmentRequiredForVehicle");

                    b.Property<string>("EmbossedCustomerName")
                        .HasMaxLength(25);

                    b.Property<int>("EmbossingElement1");

                    b.Property<int>("EmbossingElement2");

                    b.Property<int>("EmbossingElement3");

                    b.Property<int>("EmbossingOnCard");

                    b.Property<string>("ExternalDatabaseFilePath");

                    b.Property<string>("ExternalFMSNumber")
                        .HasMaxLength(25);

                    b.Property<string>("FMRGroup")
                        .HasMaxLength(3);

                    b.Property<int>("InternalCustomer");

                    b.Property<string>("InvoiceSeparation")
                        .HasMaxLength(1);

                    b.Property<bool>("IsConsignment");

                    b.Property<bool>("IsFuelMaster");

                    b.Property<bool>("IsVoyager");

                    b.Property<bool>("IsWinC6");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<string>("LiftingNumber")
                        .HasMaxLength(25);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<int>("MaxDriverNumber");

                    b.Property<int>("MinDriverNumber");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int>("MonthlyTransactionLimitMode");

                    b.Property<string>("NYCAccount")
                        .HasMaxLength(1);

                    b.Property<int>("OdometerType");

                    b.Property<int>("OdometerValidation");

                    b.Property<int>("OrgLevelsUsed");

                    b.Property<int>("PORequired");

                    b.Property<string>("PinGeneration")
                        .HasMaxLength(1);

                    b.Property<int>("ProductUse");

                    b.Property<int>("PurchaseDay");

                    b.Property<int>("PurchaseDayBand1Mode");

                    b.Property<int>("PurchaseDayBand2Mode");

                    b.Property<int>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<int>("RestrictionCode");

                    b.Property<int>("RetailCustomer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SalesPerson")
                        .HasMaxLength(25);

                    b.Property<string>("SpecialCustomerCode")
                        .HasMaxLength(1);

                    b.Property<int>("Status");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TransactionDollarLimit");

                    b.Property<int>("TransactionDollarLimitMode");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UsState")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<int?>("VoyagerAccountId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int>("WeeklyTransactionLimitMode");

                    b.Property<string>("WetHosing")
                        .HasMaxLength(1);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BAID");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserProfileId");

                    b.HasKey("Id");

                    b.ToTable("CustomerAssignment");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerCardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardCategoryId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CardCategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCardCategory");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("AllowedProducts");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerClassExternalId")
                        .HasColumnName("CustClassId")
                        .HasMaxLength(10);

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Description")
                        .HasColumnName("CustClassDesc")
                        .HasMaxLength(30);

                    b.Property<int?>("ExternalCustomerId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<decimal>("MaxFuel");

                    b.Property<decimal>("MaxRange");

                    b.Property<decimal>("MinRange");

                    b.Property<string>("ProductsNotAllowed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CustClass");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Text");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CustomerGroup");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerGroupDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerGroupId");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerGroupDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerMerchantLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<int>("MerchantId")
                        .HasColumnName("MerchantId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerMerchantLocation");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerPricingLocationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("FromDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int>("PricingLocationGroupId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("ToDate");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CustomerPricingLocationGroup");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerPricingLocationWorkEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("LocationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CustomerPricingLocationWorkEntry");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerStateLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("StateId")
                        .HasColumnName("StateId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StateId");

                    b.ToTable("CustomerStateLocation");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerZipCodeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("ZipCode")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerZipCodeLocation");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId");

                    b.Property<int>("ControlNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DAMAction");

                    b.Property<int?>("DAMCardStatusIndicator");

                    b.Property<int>("DAMStatus");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityType")
                        .HasColumnName("EntityType");

                    b.Property<string>("ErrorCode1");

                    b.Property<string>("ErrorCode1Description");

                    b.Property<string>("ErrorCode2");

                    b.Property<string>("ErrorCode2Description");

                    b.Property<string>("ErrorCode3");

                    b.Property<string>("ErrorCode3Description");

                    b.Property<string>("ErrorCode4");

                    b.Property<string>("ErrorCode4Description");

                    b.Property<int>("HasDataChange");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SequenceNumber");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntityId");

                    b.ToTable("DAMCard");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMCardConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("BAID");

                    b.Property<int>("CardEntityType")
                        .HasColumnName("EntityType");

                    b.Property<DateTime?>("CardExpirationDate");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<int?>("CardNo");

                    b.Property<int>("CardStatusIndicator");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int?>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int?>("DailyTransactionLimitMode");

                    b.Property<DateTime?>("Date1stPur");

                    b.Property<int?>("DriverId");

                    b.Property<string>("ErrorCode1")
                        .HasMaxLength(5);

                    b.Property<string>("ErrorCode2")
                        .HasMaxLength(5);

                    b.Property<string>("ErrorCode3")
                        .HasMaxLength(5);

                    b.Property<string>("ErrorCode4")
                        .HasMaxLength(5);

                    b.Property<string>("ErrorCode5")
                        .HasMaxLength(5);

                    b.Property<int>("ExternalCardId");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonsAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerBillingCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int?>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int?>("MonthlyTransactionLimitMode");

                    b.Property<int>("OdometerLimit");

                    b.Property<int>("OdometerValidation");

                    b.Property<int>("OdometerValidationMode");

                    b.Property<int>("ProductUse");

                    b.Property<int?>("PurchaseDay");

                    b.Property<int?>("PurchaseDayBand1Mode");

                    b.Property<int?>("PurchaseDayBand2Mode");

                    b.Property<int?>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.Property<string>("TheirCardNumber");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int?>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int?>("WeeklyTransactionLimitMode");

                    b.HasKey("Id");

                    b.ToTable("DAMCardConfirmation");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DAMAction");

                    b.Property<int>("DAMStatus");

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityType");

                    b.Property<string>("ErrorCode1");

                    b.Property<string>("ErrorCode1Description");

                    b.Property<string>("ErrorCode2");

                    b.Property<string>("ErrorCode2Description");

                    b.Property<string>("ErrorCode3");

                    b.Property<string>("ErrorCode3Description");

                    b.Property<string>("ErrorCode4");

                    b.Property<string>("ErrorCode4Description");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SequenceNumber");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DAMCustomer");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DAMAction");

                    b.Property<int>("DAMStatus");

                    b.Property<int>("DriverId");

                    b.Property<int>("EntityId");

                    b.Property<string>("ErrorCode1");

                    b.Property<string>("ErrorCode1Description");

                    b.Property<string>("ErrorCode2");

                    b.Property<string>("ErrorCode2Description");

                    b.Property<string>("ErrorCode3");

                    b.Property<string>("ErrorCode3Description");

                    b.Property<string>("ErrorCode4");

                    b.Property<string>("ErrorCode4Description");

                    b.Property<int>("ExternalId");

                    b.Property<int>("HasDataChange");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SequenceNumber");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntityId");

                    b.ToTable("DAMDriver");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMUploadDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TotalCards");

                    b.Property<int>("TotalCardsCreated");

                    b.Property<int>("TotalCardsUpdated");

                    b.Property<int>("TotalDrivers");

                    b.Property<int>("TotalDriversCreated");

                    b.Property<int>("TotalDriversUpdated");

                    b.Property<int>("TotalVehicles");

                    b.Property<int>("TotalVehiclesCreated");

                    b.Property<int>("TotalVehiclesUpdated");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<DateTime>("UploadDate");

                    b.HasKey("Id");

                    b.ToTable("DAMUploadDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.DAMVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DAMAction");

                    b.Property<int>("DAMStatus");

                    b.Property<int>("EntityId");

                    b.Property<string>("ErrorCode1");

                    b.Property<string>("ErrorCode1Description");

                    b.Property<string>("ErrorCode2");

                    b.Property<string>("ErrorCode2Description");

                    b.Property<string>("ErrorCode3");

                    b.Property<string>("ErrorCode3Description");

                    b.Property<string>("ErrorCode4");

                    b.Property<string>("ErrorCode4Description");

                    b.Property<int>("HasDataChange");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SequenceNumber");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntityId");

                    b.ToTable("DAMVehicle");
                });

            modelBuilder.Entity("FleetControl.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int?>("ClassId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<bool>("ExistsInVoyager");

                    b.Property<DateTime?>("ExternalDeleteDate");

                    b.Property<string>("ExternalDriverId")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasColumnName("NameFirst")
                        .HasMaxLength(20);

                    b.Property<bool>("IsConsignment");

                    b.Property<bool>("IsFuelMaster");

                    b.Property<bool>("IsVoyager");

                    b.Property<bool>("IsWinC6");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<string>("LastName")
                        .HasColumnName("NameLast")
                        .HasMaxLength(20);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<int>("MENU");

                    b.Property<int?>("MaxVehc");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(1);

                    b.Property<int?>("MinVehc");

                    b.Property<string>("Pin");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<bool?>("SubmitPending");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirEmployeeNumber")
                        .HasMaxLength(10);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UseCount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("FleetControl.Domain.DriverAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DriverId")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DriverAssignment");
                });

            modelBuilder.Entity("FleetControl.Domain.DriverImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<bool>("CopyRecord");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Dept");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExternalDriverId");

                    b.Property<string>("FirstName")
                        .HasColumnName("NameFirst")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<string>("LastName")
                        .HasColumnName("NameLast")
                        .HasMaxLength(20);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<int>("MENU");

                    b.Property<int?>("MaxVehc");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(1);

                    b.Property<int?>("MinVehc");

                    b.Property<DateTime?>("OriginCreateDate");

                    b.Property<DateTime?>("OriginModifyDate");

                    b.Property<int>("Pin");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("SyncStatus");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirEmployeeNumber")
                        .HasMaxLength(10);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UseCount");

                    b.HasKey("Id");

                    b.ToTable("DriverImport");
                });

            modelBuilder.Entity("FleetControl.Domain.DriverPinRegistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("PinNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DriverPinRegistry");
                });

            modelBuilder.Entity("FleetControl.Domain.DuplicateTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountLevel1Id");

                    b.Property<int?>("AccountNumber");

                    b.Property<int>("BillToOrgLevelDefinitionId");

                    b.Property<string>("CaptureMethod");

                    b.Property<int?>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<double?>("CostPerMile");

                    b.Property<double?>("CostPerUnit")
                        .HasColumnName("Price");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(5);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerPricingLocationGroupId");

                    b.Property<double?>("CustomerSalesAmount");

                    b.Property<int?>("DriverId");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExceptionFlags")
                        .HasMaxLength(3);

                    b.Property<string>("ExternalCardId");

                    b.Property<string>("ExternalDriverId");

                    b.Property<string>("ExternalVehicleId");

                    b.Property<decimal?>("FederalExciseTaxAmount");

                    b.Property<double?>("FederalExciseTaxRate")
                        .HasColumnName("FedEx");

                    b.Property<string>("Filename");

                    b.Property<double?>("FullPrice");

                    b.Property<int?>("HourMeter");

                    b.Property<int>("IsRetail");

                    b.Property<int>("LocationId");

                    b.Property<string>("MerchantAccountId");

                    b.Property<string>("MerchantInvoiceNumber")
                        .HasMaxLength(8);

                    b.Property<string>("MicrofileRefNumber")
                        .HasMaxLength(15);

                    b.Property<double?>("MilesPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<double?>("OtherTax");

                    b.Property<decimal?>("PBTAmount");

                    b.Property<double?>("PBTRate");

                    b.Property<int>("ParticipantCode");

                    b.Property<double?>("PerUnitCostOfGoodsSold")
                        .HasColumnName("PerUnitCOGS");

                    b.Property<DateTime?>("PostDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<double?>("ProductBasePrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(4);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProdId");

                    b.Property<string>("Pump")
                        .HasMaxLength(2);

                    b.Property<double>("PumpPrice");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtrnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("SalesTaxPerGallonAmount");

                    b.Property<double?>("SalesTaxPerGallonRate");

                    b.Property<decimal?>("SalesTaxPercentAmount");

                    b.Property<double?>("SalesTaxPercentRate");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<int>("ShipToOrgLevelDefinitionId");

                    b.Property<double?>("SolarcProductPrice");

                    b.Property<string>("Source")
                        .HasMaxLength(2);

                    b.Property<decimal?>("StateExciseTaxAmount");

                    b.Property<double?>("StateExciseTaxPerGallonRate")
                        .HasColumnName("StaEx");

                    b.Property<double?>("StateSalesTaxPerGallonRate")
                        .HasColumnName("StaSales");

                    b.Property<double?>("StationReimbursementActual");

                    b.Property<double?>("StationReimbursementAmount");

                    b.Property<string>("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<int>("TaxLocaleId");

                    b.Property<double>("TotalProductUnits")
                        .HasColumnName("AmtGal");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionTime")
                        .HasColumnName("TranTime")
                        .HasMaxLength(4);

                    b.Property<string>("TransactionType")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<double?>("UnpaidTaxes");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("VoyagerCardLevel2Id");

                    b.Property<int>("VoyagerCardLevel3Id");

                    b.Property<int>("VoyagerCardLevel4Id");

                    b.Property<int>("VoyagerCardLevel5Id");

                    b.Property<int>("VoyagerCardLevel6Id");

                    b.Property<int>("VoyagerCardLevel7Id");

                    b.Property<int>("VoyagerDriverLevel2Id");

                    b.Property<int>("VoyagerDriverLevel3Id");

                    b.Property<int>("VoyagerDriverLevel4Id");

                    b.Property<int>("VoyagerDriverLevel5Id");

                    b.Property<int>("VoyagerDriverLevel6Id");

                    b.Property<int>("VoyagerDriverLevel7Id");

                    b.Property<DateTime>("VoyagerPostDate");

                    b.Property<int>("VoyagerVehicleLevel2Id");

                    b.Property<int>("VoyagerVehicleLevel3Id");

                    b.Property<int>("VoyagerVehicleLevel4Id");

                    b.Property<int>("VoyagerVehicleLevel5Id");

                    b.Property<int>("VoyagerVehicleLevel6Id");

                    b.Property<int>("VoyagerVehicleLevel7Id");

                    b.HasKey("Id");

                    b.ToTable("DuplicateTransactions");
                });

            modelBuilder.Entity("FleetControl.Domain.ExternalDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Path")
                        .HasMaxLength(1000);

                    b.Property<string>("ProcessorName");

                    b.Property<string>("ProcessorPath");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SourceSystem");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ExternalDatabase");
                });

            modelBuilder.Entity("FleetControl.Domain.ExternalDatabaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Customerid");

                    b.Property<int>("ExternalDatabaseId");

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SourceSystem");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ExternalDatabaseId");

                    b.ToTable("ExternalDatabaseDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.FleetRec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizationNumber")
                        .HasColumnName("AuthorizationNumber")
                        .HasMaxLength(50);

                    b.Property<double>("Basis")
                        .HasColumnName("Basis");

                    b.Property<string>("BillingWeek")
                        .HasColumnName("BillingWeek")
                        .HasMaxLength(10);

                    b.Property<string>("CardNumber")
                        .HasColumnName("CardNumber")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Customer")
                        .HasColumnName("Customer")
                        .HasMaxLength(10);

                    b.Property<string>("CustomerName")
                        .HasColumnName("CustomerName")
                        .HasMaxLength(50);

                    b.Property<decimal>("CustomerPrice")
                        .HasColumnName("CustomerPrice");

                    b.Property<string>("DeviceName")
                        .HasColumnName("DeviceName")
                        .HasMaxLength(50);

                    b.Property<string>("DeviceNo")
                        .HasColumnName("DeviceNo")
                        .HasMaxLength(10);

                    b.Property<string>("Division")
                        .HasColumnName("Division")
                        .HasMaxLength(10);

                    b.Property<string>("DivisionName")
                        .HasColumnName("DivisionName")
                        .HasMaxLength(50);

                    b.Property<string>("IssueLicensee")
                        .HasColumnName("IssueLicensee")
                        .HasMaxLength(10);

                    b.Property<string>("IssueLicenseeName")
                        .HasColumnName("IssueLicenseeName")
                        .HasMaxLength(50);

                    b.Property<string>("Merchant")
                        .HasColumnName("Merchant")
                        .HasMaxLength(10);

                    b.Property<string>("MerchantName")
                        .HasColumnName("MerchantName")
                        .HasMaxLength(50);

                    b.Property<double>("MerchantPrice")
                        .HasColumnName("MerchantPrice");

                    b.Property<decimal>("NetworkPrice")
                        .HasColumnName("NetworkPrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Product")
                        .HasMaxLength(50);

                    b.Property<string>("ProductDescription")
                        .HasColumnName("ProductDescription")
                        .HasMaxLength(50);

                    b.Property<string>("ProductType")
                        .HasColumnName("ProductType")
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<string>("ReceiveLicensee")
                        .HasColumnName("ReceiveLicensee")
                        .HasMaxLength(10);

                    b.Property<string>("ReceiveLicenseeName")
                        .HasColumnName("ReceiveLicenseeName")
                        .HasMaxLength(50);

                    b.Property<decimal>("RetailPrice")
                        .HasColumnName("RetailPrice");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionNumber")
                        .HasColumnName("TranNo")
                        .HasMaxLength(50);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("FleetRec");
                });

            modelBuilder.Entity("FleetControl.Domain.FuelManagementGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(30);

                    b.Property<string>("FMRGroup")
                        .HasColumnName("FMRGroup")
                        .HasMaxLength(3);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("FuelManagementGroup");
                });

            modelBuilder.Entity("FleetControl.Domain.FuelMasterTransactionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustId");

                    b.Property<int>("Hose");

                    b.Property<int>("InterfaceDatasourceId");

                    b.Property<int>("Product");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SiteId");

                    b.Property<int>("TranNum");

                    b.Property<DateTime>("TranTime");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.Property<string>("VehicleId");

                    b.HasKey("Id");

                    b.ToTable("FuelMasterTransactionLog");
                });

            modelBuilder.Entity("FleetControl.Domain.ImportedTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountLevel1Id");

                    b.Property<int>("AccountNumber");

                    b.Property<int>("BillToOrgLevelDefinitionId");

                    b.Property<string>("CaptureMethod");

                    b.Property<int?>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<string>("CardLevel2Name");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<string>("CardLevel3Name");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<string>("CardLevel4Name");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<string>("CardLevel5Name");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<string>("CardLevel6Name");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardLevel7Name");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<double?>("CostPerMile");

                    b.Property<double?>("CostPerUnit")
                        .HasColumnName("Price");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(5);

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<int?>("CustomerPricingLocationGroupId");

                    b.Property<double?>("CustomerSalesAmount");

                    b.Property<string>("DriverFirstName");

                    b.Property<int?>("DriverId");

                    b.Property<string>("DriverLastName");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<string>("DriverLevel2Name");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<string>("DriverLevel3Name");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<string>("DriverLevel4Name");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<string>("DriverLevel5Name");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<string>("DriverLevel6Name");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverLevel7Name");

                    b.Property<string>("DriverMiddleInitial");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExceptionFlags")
                        .HasMaxLength(3);

                    b.Property<double?>("ExemptFederalTax");

                    b.Property<double?>("ExemptLocalSalesTax");

                    b.Property<double?>("ExemptMiscTax");

                    b.Property<double?>("ExemptPrimaryMotorFuelTax");

                    b.Property<double?>("ExemptSecondaryMotorFuelTax");

                    b.Property<double?>("ExemptStateSalesTax");

                    b.Property<string>("ExternalCardId");

                    b.Property<string>("ExternalDriverId");

                    b.Property<string>("ExternalVehicleId");

                    b.Property<decimal?>("FederalExciseTaxAmount");

                    b.Property<double?>("FederalExciseTaxRate")
                        .HasColumnName("FedEx");

                    b.Property<DateTime?>("FileDate");

                    b.Property<string>("Filename");

                    b.Property<double?>("FullPrice");

                    b.Property<bool>("HasCustomerLocationPricingGroup");

                    b.Property<bool>("HasLocationPricingGroup");

                    b.Property<bool>("HasMultiplePricingGroups");

                    b.Property<int?>("HourMeter");

                    b.Property<bool>("IsDuplicate");

                    b.Property<int>("IsPrepared");

                    b.Property<int>("IsRetail");

                    b.Property<bool>("IsRetailCustomer");

                    b.Property<int?>("LocationId");

                    b.Property<string>("MerchantAccountId");

                    b.Property<string>("MerchantAddress");

                    b.Property<string>("MerchantCity");

                    b.Property<string>("MerchantInvoiceNumber")
                        .HasMaxLength(8);

                    b.Property<string>("MerchantName");

                    b.Property<string>("MerchantState");

                    b.Property<string>("MerchantZip");

                    b.Property<string>("MerchantZip4");

                    b.Property<string>("MicrofileRefNumber")
                        .HasMaxLength(15);

                    b.Property<string>("MicrofilmReferenceNumber");

                    b.Property<double?>("MilesPerGallon");

                    b.Property<int?>("NumberOfInvoices");

                    b.Property<int?>("Odometer");

                    b.Property<string>("OrgNumber");

                    b.Property<double?>("OtherTax");

                    b.Property<decimal?>("PBTAmount");

                    b.Property<double?>("PBTRate");

                    b.Property<int>("ParticipantCode");

                    b.Property<double?>("PerUnitCostOfGoodsSold")
                        .HasColumnName("PerUnitCOGS");

                    b.Property<DateTime?>("PostDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<DateTime?>("ProcessDate");

                    b.Property<double?>("ProductBasePrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(4);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProdId");

                    b.Property<string>("Pump")
                        .HasMaxLength(2);

                    b.Property<double>("PumpPrice");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtrnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("SalesTaxPerGallonAmount");

                    b.Property<double?>("SalesTaxPerGallonRate");

                    b.Property<decimal?>("SalesTaxPercentAmount");

                    b.Property<double?>("SalesTaxPercentRate");

                    b.Property<int>("Sequence");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<int>("ShipToOrgLevelDefinitionId");

                    b.Property<int>("SiteNumber");

                    b.Property<double?>("SolarcProductPrice");

                    b.Property<string>("Source")
                        .HasMaxLength(2);

                    b.Property<decimal?>("StateExciseTaxAmount");

                    b.Property<double?>("StateExciseTaxPerGallonRate")
                        .HasColumnName("StaEx");

                    b.Property<double?>("StateSalesTaxPerGallonRate")
                        .HasColumnName("StaSales");

                    b.Property<DateTime?>("StatementDate");

                    b.Property<double?>("StationReimbursementActual");

                    b.Property<double?>("StationReimbursementAmount");

                    b.Property<string>("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<int?>("TaxLocaleId");

                    b.Property<double?>("TotalProductAmount");

                    b.Property<double>("TotalProductUnits")
                        .HasColumnName("AmtGal");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionNumber")
                        .HasColumnName("TranNo")
                        .HasMaxLength(15);

                    b.Property<string>("TransactionTime")
                        .HasColumnName("TranTime");

                    b.Property<string>("TransactionType")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<double?>("UnpaidTaxes");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VehicleDescription");

                    b.Property<int?>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<string>("VehicleLevel2Name");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<string>("VehicleLevel3Name");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<string>("VehicleLevel4Name");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<string>("VehicleLevel5Name");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<string>("VehicleLevel6Name");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleLevel7Name");

                    b.Property<string>("VehicleLicenseTag");

                    b.Property<string>("VehicleLicenseTagState");

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleVinNumber");

                    b.Property<string>("VoyagerCardId");

                    b.Property<int>("VoyagerCardLevel2Id");

                    b.Property<int>("VoyagerCardLevel3Id");

                    b.Property<int>("VoyagerCardLevel4Id");

                    b.Property<int>("VoyagerCardLevel5Id");

                    b.Property<int>("VoyagerCardLevel6Id");

                    b.Property<int>("VoyagerCardLevel7Id");

                    b.Property<string>("VoyagerDriverId");

                    b.Property<int>("VoyagerDriverLevel2Id");

                    b.Property<int>("VoyagerDriverLevel3Id");

                    b.Property<int>("VoyagerDriverLevel4Id");

                    b.Property<int>("VoyagerDriverLevel5Id");

                    b.Property<int>("VoyagerDriverLevel6Id");

                    b.Property<int>("VoyagerDriverLevel7Id");

                    b.Property<DateTime>("VoyagerPostDate");

                    b.Property<string>("VoyagerVehicleId");

                    b.Property<int>("VoyagerVehicleLevel2Id");

                    b.Property<int>("VoyagerVehicleLevel3Id");

                    b.Property<int>("VoyagerVehicleLevel4Id");

                    b.Property<int>("VoyagerVehicleLevel5Id");

                    b.Property<int>("VoyagerVehicleLevel6Id");

                    b.Property<int>("VoyagerVehicleLevel7Id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ImportedTransactions");
                });

            modelBuilder.Entity("FleetControl.Domain.InterfaceDatasource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("InterfaceDatasource");
                });

            modelBuilder.Entity("FleetControl.Domain.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(30);

                    b.Property<string>("ListCode")
                        .HasColumnName("List")
                        .HasMaxLength(5);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("List");
                });

            modelBuilder.Entity("FleetControl.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasMaxLength(25);

                    b.Property<string>("BillingCycle")
                        .HasColumnName("BillingCycle")
                        .HasMaxLength(1);

                    b.Property<string>("BrandedStation")
                        .HasColumnName("BrandedStation")
                        .HasMaxLength(15);

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasMaxLength(17);

                    b.Property<string>("Closed")
                        .HasColumnName("Closed")
                        .HasMaxLength(1);

                    b.Property<string>("ConsignmentEffectiveDate")
                        .HasColumnName("ConsignmentEffectiveDate")
                        .HasMaxLength(8);

                    b.Property<string>("Contact")
                        .HasColumnName("Contact")
                        .HasMaxLength(25);

                    b.Property<string>("CostPlusPubCode")
                        .HasColumnName("CostPlusPubCode")
                        .HasMaxLength(3);

                    b.Property<string>("County")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceNo")
                        .HasColumnName("DeviceNo")
                        .HasMaxLength(13);

                    b.Property<string>("Directions1")
                        .HasColumnName("Direc1")
                        .HasMaxLength(40);

                    b.Property<string>("Directions2")
                        .HasColumnName("Direc2")
                        .HasMaxLength(40);

                    b.Property<string>("EOMTaxExempt")
                        .HasColumnName("EOMTaxExempt")
                        .HasMaxLength(1);

                    b.Property<string>("ExceptionReportAltPhone")
                        .HasColumnName("ExceptionReportAltPhone")
                        .HasMaxLength(10);

                    b.Property<int?>("ExternalSiteId")
                        .HasColumnName("ExternalSiteId");

                    b.Property<string>("Fuels")
                        .HasColumnName("Fuels")
                        .HasMaxLength(50);

                    b.Property<bool>("HasRelatedTransactions");

                    b.Property<string>("Hour1")
                        .HasColumnName("Hour1")
                        .HasMaxLength(9);

                    b.Property<string>("Hour2")
                        .HasColumnName("Hour2")
                        .HasMaxLength(9);

                    b.Property<string>("IGASCA")
                        .HasColumnName("IGASCA")
                        .HasMaxLength(6);

                    b.Property<string>("IGASCAShipTo")
                        .HasColumnName("IGASCAShipTo")
                        .HasMaxLength(2);

                    b.Property<string>("JDELocation")
                        .HasColumnName("JDELocation")
                        .HasMaxLength(4);

                    b.Property<string>("MailAddress")
                        .HasColumnName("MailAddress")
                        .HasMaxLength(40);

                    b.Property<string>("MailAttn")
                        .HasColumnName("MailAttn")
                        .HasMaxLength(20);

                    b.Property<string>("MailCity")
                        .HasColumnName("MailCity")
                        .HasMaxLength(20);

                    b.Property<string>("MailName")
                        .HasColumnName("MailName")
                        .HasMaxLength(40);

                    b.Property<string>("MailState")
                        .HasColumnName("MailState")
                        .HasMaxLength(2);

                    b.Property<string>("MailZip")
                        .HasColumnName("MailZip")
                        .HasMaxLength(10);

                    b.Property<double>("Minus01")
                        .HasColumnName("01Minus");

                    b.Property<double>("Minus02")
                        .HasColumnName("02Minus");

                    b.Property<double>("Minus03")
                        .HasColumnName("03Minus");

                    b.Property<double>("Minus31")
                        .HasColumnName("31Minus");

                    b.Property<string>("NYCContractSite")
                        .HasColumnName("NYCContractSite")
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(25);

                    b.Property<string>("NeedsReview");

                    b.Property<string>("Notes");

                    b.Property<string>("Off_OnSiteType")
                        .HasColumnName("Off_OnSiteType")
                        .HasMaxLength(1);

                    b.Property<int>("ParticipantCode")
                        .HasColumnName("ParticipantCD");

                    b.Property<string>("Phone")
                        .HasColumnName("Phone")
                        .HasMaxLength(12);

                    b.Property<string>("Private")
                        .HasColumnName("Private")
                        .HasMaxLength(1);

                    b.Property<double>("RemitPercent")
                        .HasColumnName("RemitPercent");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SiteName")
                        .HasColumnName("SiteName")
                        .HasMaxLength(25);

                    b.Property<int>("SiteType")
                        .HasColumnName("SiteType");

                    b.Property<int>("SourceSystem")
                        .HasColumnName("SourceSystem");

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<string>("TaxArea")
                        .HasColumnName("TaxArea")
                        .HasMaxLength(2);

                    b.Property<int?>("TaxLocaleId")
                        .HasColumnName("TaxLocaleId");

                    b.Property<string>("Truck")
                        .HasColumnName("Truck")
                        .HasMaxLength(1);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ViewOnTaxListing")
                        .HasColumnName("ViewOnTaxListing")
                        .HasMaxLength(1);

                    b.Property<string>("Zip")
                        .HasColumnName("Zip")
                        .HasMaxLength(5);

                    b.Property<string>("Zip4")
                        .HasColumnName("Zip4")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("FleetControl.Domain.LocationPricingLocationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("FromDate");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("ToDate");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PricingLocationGroupId");

                    b.ToTable("LocationPricingLocationGroup");
                });

            modelBuilder.Entity("FleetControl.Domain.MasterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MasterGroupCode")
                        .HasColumnName("MasterGroupCode")
                        .HasMaxLength(3);

                    b.Property<string>("MasterGroupDescription")
                        .HasColumnName("MasterGroupDesc")
                        .HasMaxLength(30);

                    b.Property<string>("MasterGroupSumCode")
                        .HasColumnName("MasterGroupSumCode")
                        .HasMaxLength(3);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MasterGroups");
                });

            modelBuilder.Entity("FleetControl.Domain.NBCSProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FleetCorProduct")
                        .HasMaxLength(10);

                    b.Property<bool>("Fuel");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(16);

                    b.Property<int>("ProductId")
                        .HasColumnName("PrdctId");

                    b.Property<double>("ProductNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<string>("UnitsOfMeasure")
                        .HasColumnName("Units")
                        .HasMaxLength(10);

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NBCSProducts");
                });

            modelBuilder.Entity("FleetControl.Domain.NYCHALabels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasMaxLength(30);

                    b.Property<string>("AttnTo")
                        .HasColumnName("AttnTo")
                        .HasMaxLength(30);

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasMaxLength(24);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerNumber")
                        .HasColumnName("CustomerNumber")
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(40);

                    b.Property<string>("GroupNumber")
                        .HasColumnName("GroupNumber")
                        .HasMaxLength(5);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasColumnName("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("NYCHALabels");
                });

            modelBuilder.Entity("FleetControl.Domain.NumberRegistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Number");

                    b.Property<int>("NumberType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NumberRegistry");
                });

            modelBuilder.Entity("FleetControl.Domain.OrgLevelDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BillToLocation");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerDepartmentNumber");

                    b.Property<int>("CustomerId");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(25);

                    b.Property<int>("LevelDepth");

                    b.Property<string>("Name");

                    b.Property<int?>("OrgId");

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ShipToLocation");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OrgLevelDefinition");
                });

            modelBuilder.Entity("FleetControl.Domain.OrgLevelName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Level3Name");

                    b.Property<string>("Level4Name");

                    b.Property<string>("Level5Name");

                    b.Property<string>("Level6Name");

                    b.Property<string>("Level7Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OrgLevelName");
                });

            modelBuilder.Entity("FleetControl.Domain.ParticipantCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ParticipantCode");
                });

            modelBuilder.Entity("FleetControl.Domain.PricingLocationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsRetail");

                    b.Property<int?>("PricingLocationGroupCode");

                    b.Property<string>("PricingLocationGroupName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PricingLocationGroup");
                });

            modelBuilder.Entity("FleetControl.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ExternalProductId")
                        .HasColumnName("ExternalProductId");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("ProductAbbreviation")
                        .HasColumnName("ProdAbbrev");

                    b.Property<string>("ProductCode")
                        .HasColumnName("ProdCode");

                    b.Property<string>("ProductDescription")
                        .HasColumnName("ProdDesc");

                    b.Property<string>("ProductSumDescription")
                        .HasColumnName("ProdSumDesc");

                    b.Property<string>("ProductType")
                        .HasColumnName("ProdType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WinC6ProductName")
                        .HasColumnName("WinC6ProductName");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FleetControl.Domain.PumpPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<double>("Diesel")
                        .HasColumnName("Diesel");

                    b.Property<double>("MidUnleaded")
                        .HasColumnName("MidUnleaded");

                    b.Property<double>("PremUnleaded")
                        .HasColumnName("PremUnleaded");

                    b.Property<double>("RegUnleaded")
                        .HasColumnName("RegUnleaded");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Site")
                        .HasColumnName("Site")
                        .HasMaxLength(6);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PumpPrices");
                });

            modelBuilder.Entity("FleetControl.Domain.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("ProductId");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(30);

                    b.Property<int>("RequiredAdvance");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("ShipTo");

                    b.Property<double?>("TotalAmount");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("FleetControl.Domain.RetailAdder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdderAmount");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RetailAdder");
                });

            modelBuilder.Entity("FleetControl.Domain.SPR_CreateFleetRecExceptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingWeek")
                        .HasColumnName("BillingWeek")
                        .HasMaxLength(6);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorDescription")
                        .HasColumnName("ErrorDesc")
                        .HasMaxLength(200);

                    b.Property<string>("FleetTranNo")
                        .HasColumnName("FleetTranNo")
                        .HasMaxLength(10);

                    b.Property<string>("GasCardValue")
                        .HasColumnName("GasCardValue")
                        .HasMaxLength(20);

                    b.Property<string>("ImportValue")
                        .HasColumnName("ImportValue")
                        .HasMaxLength(20);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SPR_CreateFleetRecExceptions");
                });

            modelBuilder.Entity("FleetControl.Domain.SampleTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SampleTable");
                });

            modelBuilder.Entity("FleetControl.Domain.SendTransactionsErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountLevel1Id");

                    b.Property<int?>("AccountNumber");

                    b.Property<string>("CaptureMethod");

                    b.Property<int?>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<decimal?>("CostPerMile");

                    b.Property<decimal?>("CostPerUnit")
                        .HasColumnName("Price");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(5);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerPricingLocationGroupId");

                    b.Property<decimal?>("CustomerSalesAmount");

                    b.Property<int?>("DriverId");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExceptionFlags")
                        .HasMaxLength(3);

                    b.Property<int>("ExternalCardId");

                    b.Property<int>("ExternalDriverId");

                    b.Property<int>("ExternalVehicleId");

                    b.Property<decimal?>("FederalExciseTaxAmount");

                    b.Property<decimal?>("FederalExciseTaxRate")
                        .HasColumnName("FedEx");

                    b.Property<decimal?>("FullPrice");

                    b.Property<int?>("HourMeter");

                    b.Property<int>("LocationId");

                    b.Property<string>("MerchantAccountId");

                    b.Property<string>("MerchantInvoiceNumber")
                        .HasMaxLength(8);

                    b.Property<string>("MicrofileRefNumber")
                        .HasMaxLength(15);

                    b.Property<decimal?>("MilesPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<decimal?>("OtherTax");

                    b.Property<decimal?>("PBTAmount");

                    b.Property<decimal?>("PBTRate");

                    b.Property<int>("ParticipantCode");

                    b.Property<decimal>("PerUnitCostOfGoodsSold")
                        .HasColumnName("PerUnitCOGS");

                    b.Property<DateTime?>("PostDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<decimal?>("ProductBasePrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(4);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProdId");

                    b.Property<string>("Pump")
                        .HasMaxLength(2);

                    b.Property<decimal>("PumpPrice");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtrnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("SalesTaxPerGallonAmount");

                    b.Property<decimal?>("SalesTaxPerGallonRate");

                    b.Property<decimal?>("SalesTaxPercentAmount");

                    b.Property<decimal?>("SalesTaxPercentRate");

                    b.Property<string>("SendErrors");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<decimal?>("SolarcProductPrice");

                    b.Property<string>("Source")
                        .HasMaxLength(2);

                    b.Property<decimal?>("StateExciseTaxAmount");

                    b.Property<decimal?>("StateExciseTaxPerGallonRate")
                        .HasColumnName("StaEx");

                    b.Property<decimal?>("StateSalesTaxPerGallonRate")
                        .HasColumnName("StaSales");

                    b.Property<decimal?>("StationReimbursementActual");

                    b.Property<decimal?>("StationReimbursementAmount");

                    b.Property<string>("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<int>("TaxLocaleId");

                    b.Property<decimal?>("TotalProductUnits")
                        .HasColumnName("AmtGal");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionTime")
                        .HasColumnName("TranTime")
                        .HasMaxLength(4);

                    b.Property<string>("TransactionType")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<decimal?>("UnpaidTaxes");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<DateTime>("VoyagerPostDate");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("SendTransactionsErrorLog");
                });

            modelBuilder.Entity("FleetControl.Domain.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<double?>("BaudRate")
                        .HasColumnName("Baud");

                    b.Property<double?>("COS");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("DataBits");

                    b.Property<DateTime?>("DateOfLastConnection")
                        .HasColumnName("LastConnection");

                    b.Property<string>("ICUInitialization")
                        .HasColumnName("ICU_Init")
                        .HasMaxLength(40);

                    b.Property<string>("InitializationString")
                        .HasColumnName("InitString")
                        .HasMaxLength(50);

                    b.Property<double?>("Island");

                    b.Property<int?>("LocaleId")
                        .HasColumnName("LcleId");

                    b.Property<string>("ModemNumber")
                        .HasMaxLength(30);

                    b.Property<string>("Parity")
                        .HasMaxLength(1);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Phone")
                        .HasMaxLength(15);

                    b.Property<double?>("Port");

                    b.Property<string>("ROMDescription")
                        .HasColumnName("ROM_Desc")
                        .HasMaxLength(40);

                    b.Property<string>("ReceiptLine1")
                        .HasMaxLength(17);

                    b.Property<string>("ReceiptLine2")
                        .HasMaxLength(17);

                    b.Property<string>("ReceiptLine3")
                        .HasMaxLength(17);

                    b.Property<string>("ReceiptLine4")
                        .HasMaxLength(17);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SiteName")
                        .HasMaxLength(50);

                    b.Property<double?>("SiteNumber");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasColumnName("Zip")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("FleetControl.Domain.SiteCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardPrefix")
                        .HasMaxLength(1);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerNumber")
                        .HasColumnName("CustNo")
                        .HasMaxLength(5);

                    b.Property<string>("DeviceNumber")
                        .HasColumnName("DeviceNo")
                        .HasMaxLength(7);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SiteCustomers");
                });

            modelBuilder.Entity("FleetControl.Domain.SiteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("LocationId");

                    b.Property<int>("ProductId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SiteId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteProduct");
                });

            modelBuilder.Entity("FleetControl.Domain.SmallGallonTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountLevel1Id");

                    b.Property<int?>("AccountNumber");

                    b.Property<int>("BillToOrgLevelDefinitionId");

                    b.Property<string>("CaptureMethod");

                    b.Property<int?>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<double?>("CostPerMile");

                    b.Property<double?>("CostPerUnit")
                        .HasColumnName("Price");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(5);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerPricingLocationGroupId");

                    b.Property<double?>("CustomerSalesAmount");

                    b.Property<int?>("DriverId");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExceptionFlags")
                        .HasMaxLength(3);

                    b.Property<int>("ExternalCardId");

                    b.Property<int>("ExternalDriverId");

                    b.Property<int>("ExternalVehicleId");

                    b.Property<decimal?>("FederalExciseTaxAmount");

                    b.Property<double?>("FederalExciseTaxRate")
                        .HasColumnName("FedEx");

                    b.Property<string>("Filename");

                    b.Property<double?>("FullPrice");

                    b.Property<int?>("HourMeter");

                    b.Property<int>("IsRetail");

                    b.Property<int>("LocationId");

                    b.Property<string>("MerchantAccountId");

                    b.Property<string>("MerchantInvoiceNumber")
                        .HasMaxLength(8);

                    b.Property<string>("MicrofileRefNumber")
                        .HasMaxLength(15);

                    b.Property<double?>("MilesPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<double?>("OtherTax");

                    b.Property<decimal?>("PBTAmount");

                    b.Property<double?>("PBTRate");

                    b.Property<int>("ParticipantCode");

                    b.Property<double?>("PerUnitCostOfGoodsSold")
                        .HasColumnName("PerUnitCOGS");

                    b.Property<DateTime?>("PostDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<double?>("ProductBasePrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(4);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProdId");

                    b.Property<string>("Pump")
                        .HasMaxLength(2);

                    b.Property<double>("PumpPrice");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtrnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("SalesTaxPerGallonAmount");

                    b.Property<double?>("SalesTaxPerGallonRate");

                    b.Property<decimal?>("SalesTaxPercentAmount");

                    b.Property<double?>("SalesTaxPercentRate");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<int>("ShipToOrgLevelDefinitionId");

                    b.Property<double?>("SolarcProductPrice");

                    b.Property<string>("Source")
                        .HasMaxLength(2);

                    b.Property<decimal?>("StateExciseTaxAmount");

                    b.Property<double?>("StateExciseTaxPerGallonRate")
                        .HasColumnName("StaEx");

                    b.Property<double?>("StateSalesTaxPerGallonRate")
                        .HasColumnName("StaSales");

                    b.Property<double?>("StationReimbursementActual");

                    b.Property<double?>("StationReimbursementAmount");

                    b.Property<string>("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<int>("TaxLocaleId");

                    b.Property<double>("TotalProductUnits")
                        .HasColumnName("AmtGal");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionTime")
                        .HasColumnName("TranTime")
                        .HasMaxLength(4);

                    b.Property<string>("TransactionType")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<double?>("UnpaidTaxes");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("VoyagerCardLevel2Id");

                    b.Property<int>("VoyagerCardLevel3Id");

                    b.Property<int>("VoyagerCardLevel4Id");

                    b.Property<int>("VoyagerCardLevel5Id");

                    b.Property<int>("VoyagerCardLevel6Id");

                    b.Property<int>("VoyagerCardLevel7Id");

                    b.Property<int>("VoyagerDriverLevel2Id");

                    b.Property<int>("VoyagerDriverLevel3Id");

                    b.Property<int>("VoyagerDriverLevel4Id");

                    b.Property<int>("VoyagerDriverLevel5Id");

                    b.Property<int>("VoyagerDriverLevel6Id");

                    b.Property<int>("VoyagerDriverLevel7Id");

                    b.Property<DateTime>("VoyagerPostDate");

                    b.Property<int>("VoyagerVehicleLevel2Id");

                    b.Property<int>("VoyagerVehicleLevel3Id");

                    b.Property<int>("VoyagerVehicleLevel4Id");

                    b.Property<int>("VoyagerVehicleLevel5Id");

                    b.Property<int>("VoyagerVehicleLevel6Id");

                    b.Property<int>("VoyagerVehicleLevel7Id");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("SmallGallonTransactions");
                });

            modelBuilder.Entity("FleetControl.Domain.SolarcLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LocaleAbbreviation")
                        .HasMaxLength(20);

                    b.Property<string>("LocaleName");

                    b.Property<string>("LocaleStatus")
                        .HasMaxLength(1);

                    b.Property<int>("LocaleTypeId");

                    b.Property<int>("OfficeBAID");

                    b.Property<int>("OfficeLocaleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SolarcLocale");
                });

            modelBuilder.Entity("FleetControl.Domain.SolarcProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProductAbbreviation")
                        .HasMaxLength(3);

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50);

                    b.Property<string>("ProductStatus")
                        .HasMaxLength(1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SolArcProduct");
                });

            modelBuilder.Entity("FleetControl.Domain.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("FleetControl.Domain.SpecialCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("SpecialCustomerCode")
                        .HasMaxLength(1);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SpecialCustomer");
                });

            modelBuilder.Entity("FleetControl.Domain.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("StateCode")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<string>("TaxArea")
                        .HasColumnName("TaxArea")
                        .HasMaxLength(2);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("FleetControl.Domain.SyncCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("CardEntityType")
                        .HasColumnName("EntityType");

                    b.Property<DateTime?>("CardExpirationDate");

                    b.Property<int>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<int?>("CardNo");

                    b.Property<int>("CardPromptPattern");

                    b.Property<int>("CardStatusIndicator");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int?>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int?>("DailyTransactionLimitMode");

                    b.Property<DateTime?>("Date1stPur");

                    b.Property<int?>("DriverId");

                    b.Property<int>("ExternalCardId");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonsAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerBillingCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int?>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int?>("MonthlyTransactionLimitMode");

                    b.Property<int?>("OdometerLimit");

                    b.Property<int?>("OdometerLimitMode");

                    b.Property<int>("OdometerValidation");

                    b.Property<int?>("PinNumber");

                    b.Property<int>("ProductUse");

                    b.Property<int>("PurchaseDay");

                    b.Property<int?>("PurchaseDayBand1Mode");

                    b.Property<int?>("PurchaseDayBand2Mode");

                    b.Property<int?>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TheirCardNumber");

                    b.Property<int?>("TransactionDollarLimit");

                    b.Property<int?>("TransactionDollarLimitMode");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int?>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int?>("WeeklyTransactionLimitMode");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SyncCard");
                });

            modelBuilder.Entity("FleetControl.Domain.SyncVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DateFirstPurchased")
                        .HasColumnName("Date1stPur");

                    b.Property<string>("ExternalPin")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<string>("MeterType")
                        .HasMaxLength(12);

                    b.Property<string>("MileageUnitsOfMeasure")
                        .HasMaxLength(10);

                    b.Property<int?>("MileageUnitsPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<int>("Pin");

                    b.Property<int>("Product1Capacity");

                    b.Property<int>("Product2Capacity");

                    b.Property<int?>("ProductCapPercentVariance")
                        .HasColumnName("ProductCapPercentVar");

                    b.Property<string>("ProductType1")
                        .HasMaxLength(25);

                    b.Property<string>("ProductType2")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("Qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<string>("TheirVehicleNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<string>("UsedOnRoad")
                        .HasMaxLength(1);

                    b.Property<string>("VehicleDescription")
                        .HasColumnName("VehDesc")
                        .HasMaxLength(25);

                    b.Property<int>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int>("VehicleLevel3Id");

                    b.Property<int>("VehicleLevel4Id");

                    b.Property<int>("VehicleLevel5Id");

                    b.Property<int>("VehicleLevel6Id");

                    b.Property<int>("VehicleLevel7Id");

                    b.Property<string>("VehicleLicenseTag")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleLicenseTagState")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("VinNumber")
                        .HasColumnName("VIN")
                        .HasMaxLength(17);

                    b.HasKey("Id");

                    b.ToTable("SyncVehicle");
                });

            modelBuilder.Entity("FleetControl.Domain.TaxArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("County")
                        .HasColumnName("County")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MCTD")
                        .HasColumnName("MCTD")
                        .HasMaxLength(1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SalesTaxRegion")
                        .HasColumnName("SalesTaxRegion")
                        .HasMaxLength(1);

                    b.Property<string>("State")
                        .HasColumnName("State")
                        .HasMaxLength(2);

                    b.Property<string>("TaxAreaCode")
                        .HasColumnName("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxAreaDescription")
                        .HasColumnName("TaxAreaDesc")
                        .HasMaxLength(30);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TaxAreas");
                });

            modelBuilder.Entity("FleetControl.Domain.TaxLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SolarcTaxLocaleId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TaxLocation");
                });

            modelBuilder.Entity("FleetControl.Domain.TempTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("AccountLevel1Id");

                    b.Property<int>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<string>("CardLevel2Name");

                    b.Property<int>("CardLevel3Id");

                    b.Property<string>("CardLevel3Name");

                    b.Property<int>("CardLevel4Id");

                    b.Property<string>("CardLevel4Name");

                    b.Property<int>("CardLevel5Id");

                    b.Property<decimal>("CostPerMile");

                    b.Property<decimal>("CostPerUnit");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerName");

                    b.Property<string>("DriverFirstName");

                    b.Property<int>("DriverId");

                    b.Property<string>("DriverLastName");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<string>("DriverLevel2Name");

                    b.Property<int>("DriverLevel3Id");

                    b.Property<string>("DriverLevel3Name");

                    b.Property<int>("DriverLevel4Id");

                    b.Property<string>("DriverLevel4Name");

                    b.Property<int>("DriverLevel5Id");

                    b.Property<string>("DriverLevel5Name");

                    b.Property<int>("DriverLevel6Id");

                    b.Property<string>("DriverLevel6Name");

                    b.Property<int>("DriverLevel7Id");

                    b.Property<string>("DriverLevel7Name");

                    b.Property<string>("DriverMiddleInitial");

                    b.Property<decimal>("ExemptFederalTax");

                    b.Property<decimal>("ExemptLocalSalesTax");

                    b.Property<decimal>("ExemptMiscTax");

                    b.Property<decimal>("ExemptPrimaryMotorFuelTax");

                    b.Property<decimal>("ExemptSecondaryMotorFuelTax");

                    b.Property<decimal>("ExemptStateSalesTax");

                    b.Property<decimal>("ExemptTaxes");

                    b.Property<DateTime?>("FileDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("Filler");

                    b.Property<string>("Flags");

                    b.Property<bool>("FooterStamped");

                    b.Property<int>("InvoiceCount");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("MerchantAccountNumber");

                    b.Property<string>("MerchantAddress");

                    b.Property<string>("MerchantCity");

                    b.Property<string>("MerchantState");

                    b.Property<string>("MerchantZipCode");

                    b.Property<string>("MerchantZipCode4");

                    b.Property<string>("MessageIdPosition");

                    b.Property<string>("MicrofilmReferenceNumber");

                    b.Property<decimal>("MilesPerGallon");

                    b.Property<int>("Odometer");

                    b.Property<string>("OrgNumber");

                    b.Property<int>("ParticipantCode");

                    b.Property<decimal>("ProductAmount");

                    b.Property<string>("ProductCode");

                    b.Property<decimal>("ProductUnits");

                    b.Property<string>("PurchaseDate");

                    b.Property<int>("PurchaseTime");

                    b.Property<string>("RecordType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SenderName");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<DateTime?>("StatementDate");

                    b.Property<decimal>("TotalProductAmount");

                    b.Property<decimal>("TotalProductUnits");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VehicleDescription");

                    b.Property<int>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<string>("VehicleLevel2Name");

                    b.Property<int>("VehicleLevel3Id");

                    b.Property<string>("VehicleLevel3Name");

                    b.Property<int>("VehicleLevel4Id");

                    b.Property<string>("VehicleLevel4Name");

                    b.Property<int>("VehicleLevel5Id");

                    b.Property<string>("VehicleLevel5Name");

                    b.Property<int>("VehicleLevel6Id");

                    b.Property<string>("VehicleLevel6Name");

                    b.Property<int>("VehicleLevel7Id");

                    b.Property<string>("VehicleLevel7Name");

                    b.Property<string>("VehicleLicenseTag");

                    b.Property<string>("VehicleLicenseTagState");

                    b.Property<string>("VehicleVinNumber");

                    b.HasKey("Id");

                    b.ToTable("TempTransaction");
                });

            modelBuilder.Entity("FleetControl.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountLevel1Id");

                    b.Property<int?>("AccountNumber");

                    b.Property<int>("BillToOrgLevelDefinitionId");

                    b.Property<string>("CaptureMethod");

                    b.Property<int?>("CardId");

                    b.Property<int>("CardLevel2Id");

                    b.Property<int?>("CardLevel3Id");

                    b.Property<int?>("CardLevel4Id");

                    b.Property<int?>("CardLevel5Id");

                    b.Property<int?>("CardLevel6Id");

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<double?>("CostPerMile");

                    b.Property<double?>("CostPerUnit")
                        .HasColumnName("Price");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(5);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerPricingLocationGroupId");

                    b.Property<double?>("CustomerSalesAmount");

                    b.Property<int?>("DriverId");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExceptionFlags")
                        .HasMaxLength(3);

                    b.Property<bool>("ExceptionsProcessed");

                    b.Property<string>("ExternalCardId");

                    b.Property<string>("ExternalDriverId");

                    b.Property<string>("ExternalVehicleId");

                    b.Property<decimal?>("FederalExciseTaxAmount");

                    b.Property<double?>("FederalExciseTaxRate")
                        .HasColumnName("FedEx");

                    b.Property<string>("Filename");

                    b.Property<double?>("FullPrice");

                    b.Property<int?>("HourMeter");

                    b.Property<int>("IsRetail");

                    b.Property<int>("LocationId");

                    b.Property<string>("MerchantAccountId");

                    b.Property<string>("MerchantInvoiceNumber")
                        .HasMaxLength(8);

                    b.Property<string>("MicrofileRefNumber")
                        .HasMaxLength(15);

                    b.Property<double?>("MilesPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<double?>("OtherTax");

                    b.Property<decimal?>("PBTAmount");

                    b.Property<double?>("PBTRate");

                    b.Property<int>("ParticipantCode");

                    b.Property<double?>("PerUnitCostOfGoodsSold")
                        .HasColumnName("PerUnitCOGS");

                    b.Property<DateTime?>("PostDate");

                    b.Property<int?>("PriceServiceId");

                    b.Property<int?>("PricingLocationGroupId");

                    b.Property<double?>("ProductBasePrice");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(4);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProdId");

                    b.Property<string>("Pump")
                        .HasMaxLength(2);

                    b.Property<double>("PumpPrice");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(30);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtrnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("SalesTaxPerGallonAmount");

                    b.Property<double?>("SalesTaxPerGallonRate");

                    b.Property<decimal?>("SalesTaxPercentAmount");

                    b.Property<double?>("SalesTaxPercentRate");

                    b.Property<int>("Sequence");

                    b.Property<string>("ServiceTypeIndicator");

                    b.Property<int>("ShipToOrgLevelDefinitionId");

                    b.Property<int>("SiteNumber");

                    b.Property<double?>("SolarcProductPrice");

                    b.Property<string>("Source")
                        .HasMaxLength(2);

                    b.Property<decimal?>("StateExciseTaxAmount");

                    b.Property<double?>("StateExciseTaxPerGallonRate")
                        .HasColumnName("StaEx");

                    b.Property<double?>("StateSalesTaxPerGallonRate")
                        .HasColumnName("StaSales");

                    b.Property<double?>("StationReimbursementActual");

                    b.Property<double?>("StationReimbursementAmount");

                    b.Property<string>("TaxArea")
                        .HasMaxLength(2);

                    b.Property<string>("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<int>("TaxLocaleId");

                    b.Property<double>("TotalProductUnits")
                        .HasColumnName("AmtGal");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TransactionNumber")
                        .HasColumnName("TranNo")
                        .HasMaxLength(15);

                    b.Property<string>("TransactionTime")
                        .HasColumnName("TranTime")
                        .HasMaxLength(4);

                    b.Property<string>("TransactionType")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<double?>("UnpaidTaxes");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VehicleId");

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("VoyagerCardLevel2Id");

                    b.Property<int>("VoyagerCardLevel3Id");

                    b.Property<int>("VoyagerCardLevel4Id");

                    b.Property<int>("VoyagerCardLevel5Id");

                    b.Property<int>("VoyagerCardLevel6Id");

                    b.Property<int>("VoyagerCardLevel7Id");

                    b.Property<int>("VoyagerDriverLevel2Id");

                    b.Property<int>("VoyagerDriverLevel3Id");

                    b.Property<int>("VoyagerDriverLevel4Id");

                    b.Property<int>("VoyagerDriverLevel5Id");

                    b.Property<int>("VoyagerDriverLevel6Id");

                    b.Property<int>("VoyagerDriverLevel7Id");

                    b.Property<DateTime>("VoyagerPostDate");

                    b.Property<int>("VoyagerVehicleLevel2Id");

                    b.Property<int>("VoyagerVehicleLevel3Id");

                    b.Property<int>("VoyagerVehicleLevel4Id");

                    b.Property<int>("VoyagerVehicleLevel5Id");

                    b.Property<int>("VoyagerVehicleLevel6Id");

                    b.Property<int>("VoyagerVehicleLevel7Id");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionError");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionErrorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ImportedTransactionId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TransactionErrorId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ImportedTransactionId");

                    b.HasIndex("TransactionErrorId");

                    b.ToTable("TransactionErrorDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionException");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionExceptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionExceptionId");

                    b.Property<int>("TransactionId");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TransactionExceptionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionExceptionDetail");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionFlag");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionImportLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Filename");

                    b.Property<int>("NumberOfInvoices");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("StatementDate");

                    b.Property<decimal>("TotalProductAmount");

                    b.Property<decimal>("TotalProductUnits");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionImportLog");
                });

            modelBuilder.Entity("FleetControl.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int?>("ClassId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DateFirstPurchased")
                        .HasColumnName("Date1stPur");

                    b.Property<bool>("ExistsInVoyager");

                    b.Property<DateTime?>("ExternalDeleteDate");

                    b.Property<string>("ExternalPin")
                        .HasMaxLength(10);

                    b.Property<string>("ExternalVehicleId");

                    b.Property<bool>("IsConsignment");

                    b.Property<bool>("IsFuelMaster");

                    b.Property<bool>("IsVoyager");

                    b.Property<bool>("IsWinC6");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LegacyProductCode1")
                        .HasMaxLength(5);

                    b.Property<string>("LegacyProductCode2")
                        .HasMaxLength(5);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<string>("MeterType")
                        .HasMaxLength(12);

                    b.Property<string>("MileageUnitsOfMeasure")
                        .HasMaxLength(10);

                    b.Property<int?>("MileageUnitsPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<int>("Pin");

                    b.Property<int>("Product1Capacity");

                    b.Property<int>("Product2Capacity");

                    b.Property<int?>("ProductCapPercentVariance")
                        .HasColumnName("ProductCapPercentVar");

                    b.Property<int?>("ProductType1");

                    b.Property<int?>("ProductType2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("Qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<bool?>("SubmitPending");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirVehicleNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<string>("UsedOnRoad")
                        .HasMaxLength(1);

                    b.Property<string>("VehicleDescription")
                        .IsRequired()
                        .HasColumnName("VehDesc")
                        .HasMaxLength(25);

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleLicenseTag")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleLicenseTagState")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("VinNumber")
                        .HasColumnName("VIN")
                        .HasMaxLength(17);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("FleetControl.Domain.VehicleImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("CardNo")
                        .HasMaxLength(10);

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int?>("ClassId");

                    b.Property<bool>("CopyRecord");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustNo")
                        .HasMaxLength(10);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DateFirstPurchased")
                        .HasColumnName("Date1stPur");

                    b.Property<string>("Dept");

                    b.Property<string>("ExternalPin")
                        .HasMaxLength(10);

                    b.Property<int>("ExternalVehicleId");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LegacyProductCode1")
                        .HasMaxLength(5);

                    b.Property<string>("LegacyProductCode2")
                        .HasMaxLength(5);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<string>("MeterType")
                        .HasMaxLength(12);

                    b.Property<string>("MileageUnitsOfMeasure")
                        .HasMaxLength(10);

                    b.Property<int?>("MileageUnitsPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<DateTime?>("OriginCreateDate");

                    b.Property<DateTime?>("OriginModifyDate");

                    b.Property<string>("OriginProduct");

                    b.Property<int>("Pin");

                    b.Property<int>("Product1Capacity");

                    b.Property<int>("Product2Capacity");

                    b.Property<int?>("ProductCapPercentVariance")
                        .HasColumnName("ProductCapPercentVar");

                    b.Property<int?>("ProductType1");

                    b.Property<int?>("ProductType2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("Qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("SyncStatus");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirVehicleNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<string>("UsedOnRoad")
                        .HasMaxLength(1);

                    b.Property<string>("VehicleDescription")
                        .HasColumnName("VehDesc")
                        .HasMaxLength(25);

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleLicenseTag")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleLicenseTagState")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("VinNumber")
                        .HasColumnName("VIN")
                        .HasMaxLength(17);

                    b.HasKey("Id");

                    b.ToTable("VehicleImport");
                });

            modelBuilder.Entity("FleetControl.Domain.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Text")
                        .HasColumnName("VehicleTypeDesc")
                        .HasMaxLength(30);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Value")
                        .HasColumnName("VehicleType")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("FleetControl.Domain.VoidTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountOfGallons")
                        .HasColumnName("AmtGal");

                    b.Property<string>("CardNumber")
                        .HasColumnName("CardNo")
                        .HasMaxLength(19);

                    b.Property<string>("CardNumberShort")
                        .HasColumnName("CardNoShort")
                        .HasMaxLength(6);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate");

                    b.Property<string>("CustomerCardNumber");

                    b.Property<string>("CustomerNumber")
                        .HasColumnName("CustNo")
                        .HasMaxLength(5);

                    b.Property<DateTime>("DateProcessed")
                        .HasColumnName("DateProcessed");

                    b.Property<string>("DeviceNo")
                        .HasColumnName("DeviceNo")
                        .HasMaxLength(7);

                    b.Property<string>("EmplNo")
                        .HasColumnName("EmplNo")
                        .HasMaxLength(5);

                    b.Property<string>("ErrorCondition")
                        .HasColumnName("ErrorCond")
                        .HasMaxLength(2);

                    b.Property<string>("FleetNetTranNo")
                        .HasColumnName("FleetNetTranNo")
                        .HasMaxLength(10);

                    b.Property<string>("FleetNetWeek")
                        .HasColumnName("FleetNetWeek")
                        .HasMaxLength(6);

                    b.Property<string>("Item")
                        .HasColumnName("Item")
                        .HasMaxLength(2);

                    b.Property<string>("Odometer")
                        .HasColumnName("Odometer")
                        .HasMaxLength(6);

                    b.Property<string>("OriginalSRAExternalDocumentNumber")
                        .HasColumnName("OrgnlSRAExtnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<double>("PostedCustomerSaleAmount")
                        .HasColumnName("PostedCustomerSaleAmount");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price");

                    b.Property<string>("ProductCode")
                        .HasColumnName("Prod")
                        .HasMaxLength(2);

                    b.Property<string>("PropertyName")
                        .HasColumnName("FranNo")
                        .HasMaxLength(10);

                    b.Property<string>("Pump")
                        .HasColumnName("Pump")
                        .HasMaxLength(2);

                    b.Property<double>("PumpPrice")
                        .HasColumnName("PumpPrice");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SRAExternalDocumentNumber")
                        .HasColumnName("SRAExtnlDcmntNmbr")
                        .HasMaxLength(80);

                    b.Property<string>("SiteLicenseeNumber")
                        .HasColumnName("SiteFran")
                        .HasMaxLength(5);

                    b.Property<double>("StationReimbursementActual")
                        .HasColumnName("StationReimbursementActual");

                    b.Property<decimal>("StationReimbursementAmount")
                        .HasColumnName("StationReimbursementAmount");

                    b.Property<string>("TaxFlag")
                        .HasColumnName("TaxFlag")
                        .HasMaxLength(1);

                    b.Property<DateTime>("TranDate")
                        .HasColumnName("TranDate");

                    b.Property<string>("TranNo")
                        .HasColumnName("TranNo")
                        .HasMaxLength(4);

                    b.Property<string>("TranTime")
                        .HasColumnName("TranTime")
                        .HasMaxLength(4);

                    b.Property<string>("TranType4")
                        .HasColumnName("TranType4")
                        .HasMaxLength(4);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("VehicleNumber")
                        .HasColumnName("VehcNo")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("VoidTransactions");
                });

            modelBuilder.Entity("FleetControl.Domain.VoyagerErrorCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorCode");

                    b.Property<string>("ErrorDescription");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("VoyagerErrorCodes");
                });

            modelBuilder.Entity("FleetControl.Domain.VoyagerSyncCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("CardEntityType")
                        .HasColumnName("EntityType");

                    b.Property<DateTime?>("CardExpirationDate");

                    b.Property<int>("CardLevel2Id");

                    b.Property<string>("CardLevel2Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardLevel3Id");

                    b.Property<string>("CardLevel3Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardLevel4Id");

                    b.Property<string>("CardLevel4Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardLevel5Id");

                    b.Property<string>("CardLevel5Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardLevel6Id");

                    b.Property<string>("CardLevel6Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardLevel7Id");

                    b.Property<string>("CardLevel7Name")
                        .HasMaxLength(25);

                    b.Property<int?>("CardNo");

                    b.Property<int>("CardPromptPattern");

                    b.Property<string>("CardUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("CardUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("CardUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("CardUserCode5")
                        .HasMaxLength(8);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DAMCardStatusIndicator");

                    b.Property<int?>("DailyDollarLimit");

                    b.Property<int?>("DailyDollarLimitMode");

                    b.Property<int?>("DailyTransactionLimit");

                    b.Property<int?>("DailyTransactionLimitMode");

                    b.Property<DateTime?>("Date1stPur");

                    b.Property<int?>("DriverId");

                    b.Property<string>("EmbossedCardNumber")
                        .HasMaxLength(15);

                    b.Property<int>("ExternalCardId");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonsAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerBillingCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<int?>("MonthlyDollarLimit");

                    b.Property<int?>("MonthlyDollarLimitMode");

                    b.Property<int?>("MonthlyTransactionLimit");

                    b.Property<int?>("MonthlyTransactionLimitMode");

                    b.Property<int?>("OdometerLimit");

                    b.Property<int>("OdometerValidation");

                    b.Property<int?>("OdometerValidationMode");

                    b.Property<int?>("PinNumber");

                    b.Property<int>("ProductUse");

                    b.Property<int?>("PurchaseDay");

                    b.Property<int?>("PurchaseDayMode");

                    b.Property<DateTime?>("PurchaseFromTimeBand1");

                    b.Property<DateTime?>("PurchaseFromTimeBand2");

                    b.Property<int?>("PurchaseTimeBand1Mode");

                    b.Property<int?>("PurchaseTimeBand2Mode");

                    b.Property<DateTime?>("PurchaseToTimeBand1");

                    b.Property<DateTime?>("PurchaseToTimeBand2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("QTY");

                    b.Property<int>("RestrictionCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SpragueEntityId");

                    b.Property<int>("Status");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirCardNumber");

                    b.Property<int?>("TransactionDollarLimit");

                    b.Property<int?>("TransactionDollarLimitMode");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<int?>("VehicleId");

                    b.Property<int?>("WeeklyDollarLimit");

                    b.Property<int?>("WeeklyDollarLimitMode");

                    b.Property<int?>("WeeklyTransactionLimit");

                    b.Property<int?>("WeeklyTransactionLimitMode");

                    b.HasKey("Id");

                    b.ToTable("VoyagerSyncCard");
                });

            modelBuilder.Entity("FleetControl.Domain.VoyagerSyncDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DriverLevel2Id");

                    b.Property<string>("DriverLevel2Name")
                        .HasMaxLength(25);

                    b.Property<int?>("DriverLevel3Id");

                    b.Property<string>("DriverLevel3Name")
                        .HasMaxLength(25);

                    b.Property<int?>("DriverLevel4Id");

                    b.Property<string>("DriverLevel4Name")
                        .HasMaxLength(25);

                    b.Property<int?>("DriverLevel5Id");

                    b.Property<string>("DriverLevel5Name")
                        .HasMaxLength(25);

                    b.Property<int?>("DriverLevel6Id");

                    b.Property<string>("DriverLevel6Name")
                        .HasMaxLength(25);

                    b.Property<int?>("DriverLevel7Id");

                    b.Property<string>("DriverLevel7Name")
                        .HasMaxLength(25);

                    b.Property<string>("DriverUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("DriverUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("DriverUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("DriverUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("ExternalDriverId");

                    b.Property<string>("FirstName")
                        .HasColumnName("NameFirst")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<string>("LastName")
                        .HasColumnName("NameLast")
                        .HasMaxLength(20);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<int>("MENU");

                    b.Property<int?>("MaxVehc");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(1);

                    b.Property<int?>("MinVehc");

                    b.Property<int>("Pin");

                    b.Property<decimal>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirEmployeeNumber")
                        .HasMaxLength(10);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UseCount");

                    b.HasKey("Id");

                    b.ToTable("VoyagerSyncDriver");
                });

            modelBuilder.Entity("FleetControl.Domain.VoyagerSyncVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<string>("Class")
                        .HasMaxLength(10);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DateFirstPurchased")
                        .HasColumnName("Date1stPur");

                    b.Property<string>("ExternalPin")
                        .HasMaxLength(10);

                    b.Property<int>("ExternalVehicleId");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<decimal?>("LastGallonAmount")
                        .HasColumnName("LastGallons");

                    b.Property<DateTime?>("LastOdometer");

                    b.Property<DateTime?>("LastUseDate");

                    b.Property<string>("LegacyProductCode1")
                        .HasMaxLength(5);

                    b.Property<string>("LegacyProductCode2")
                        .HasMaxLength(5);

                    b.Property<string>("LockCode")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LockDate");

                    b.Property<decimal?>("MaxGallonsPerCycle")
                        .HasColumnName("MaxGalCycl");

                    b.Property<decimal?>("MaxGallonsPerDay")
                        .HasColumnName("MaxGalDay");

                    b.Property<decimal?>("MaxGallonsPerTransaction")
                        .HasColumnName("MaxGalTrn");

                    b.Property<decimal?>("MaxMotorOilDollars")
                        .HasColumnName("MaxMotorOil");

                    b.Property<string>("MeterType")
                        .HasMaxLength(12);

                    b.Property<string>("MileageUnitsOfMeasure")
                        .HasMaxLength(10);

                    b.Property<int?>("MileageUnitsPerGallon");

                    b.Property<int?>("Odometer");

                    b.Property<int>("Pin");

                    b.Property<int>("Product1Capacity");

                    b.Property<int>("Product2Capacity");

                    b.Property<int?>("ProductCapPercentVariance")
                        .HasColumnName("ProductCapPercentVar");

                    b.Property<int?>("ProductType1");

                    b.Property<int?>("ProductType2");

                    b.Property<decimal?>("Quantity")
                        .HasColumnName("Qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence");

                    b.Property<int>("Status");

                    b.Property<int>("Synchronized");

                    b.Property<string>("TheirVehicleNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UseCount");

                    b.Property<string>("UsedOnRoad")
                        .HasMaxLength(1);

                    b.Property<string>("VehicleDescription")
                        .HasColumnName("VehDesc")
                        .HasMaxLength(25);

                    b.Property<int>("VehicleLevel2Id");

                    b.Property<string>("VehicleLevel2Name")
                        .HasMaxLength(25);

                    b.Property<int?>("VehicleLevel3Id");

                    b.Property<string>("VehicleLevel3Name")
                        .HasMaxLength(25);

                    b.Property<int?>("VehicleLevel4Id");

                    b.Property<string>("VehicleLevel4Name")
                        .HasMaxLength(25);

                    b.Property<int?>("VehicleLevel5Id");

                    b.Property<string>("VehicleLevel5Name")
                        .HasMaxLength(25);

                    b.Property<int?>("VehicleLevel6Id");

                    b.Property<string>("VehicleLevel6Name")
                        .HasMaxLength(25);

                    b.Property<int?>("VehicleLevel7Id");

                    b.Property<string>("VehicleLevel7Name")
                        .HasMaxLength(25);

                    b.Property<string>("VehicleLicenseTag")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleLicenseTagState")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(2);

                    b.Property<string>("VehicleUserCode1")
                        .HasMaxLength(13);

                    b.Property<string>("VehicleUserCode2")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleUserCode3")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode4")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleUserCode5")
                        .HasMaxLength(8);

                    b.Property<string>("VinNumber")
                        .HasColumnName("VIN")
                        .HasMaxLength(17);

                    b.HasKey("Id");

                    b.ToTable("VoyagerSyncVehicle");
                });

            modelBuilder.Entity("FleetControl.Domain.WinC6TransactionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SequenceNumber");

                    b.Property<int>("SiteId");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("WinC6TransactionLog");
                });

            modelBuilder.Entity("FleetControl.Domain.YTD_Product_Totals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerNumber")
                        .HasColumnName("CustomerNumber")
                        .HasMaxLength(5);

                    b.Property<double>("Dollars")
                        .HasColumnName("Dollars");

                    b.Property<string>("Month")
                        .HasColumnName("_Month")
                        .HasMaxLength(2);

                    b.Property<string>("ProductCode")
                        .HasColumnName("Product")
                        .HasMaxLength(2);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("Total")
                        .HasColumnName("Total");

                    b.Property<Guid>("UniqueIdentifier");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Year")
                        .HasColumnName("_Year")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("YTD_Product_Totals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FleetControl.Domain.Audit", b =>
                {
                    b.HasOne("FleetControl.Domain.AuditEvent", "AuditEvent")
                        .WithMany()
                        .HasForeignKey("AuditEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.AuditDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.AuditDataType", "AuditDataType")
                        .WithMany()
                        .HasForeignKey("AuditDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Audit", "Audit")
                        .WithMany("AuditDetails")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.AuditHistory", b =>
                {
                    b.HasOne("FleetControl.Domain.AuditEvent", "AuditEvent")
                        .WithMany()
                        .HasForeignKey("AuditEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.AuditHistoryDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.AuditDataType", "AuditDataType")
                        .WithMany()
                        .HasForeignKey("AuditDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.AuditHistory", "AuditHistory")
                        .WithMany("AuditDetails")
                        .HasForeignKey("AuditHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.Card", b =>
                {
                    b.HasOne("FleetControl.Domain.CardClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("FleetControl.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("FleetControl.Domain.CardImport", b =>
                {
                    b.HasOne("FleetControl.Domain.CardClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("FleetControl.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.HasOne("FleetControl.Domain.VehicleImport", "VehicleImport")
                        .WithMany()
                        .HasForeignKey("VehicleImportId");
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerCardCategory", b =>
                {
                    b.HasOne("FleetControl.Domain.CardCategory", "CardCategory")
                        .WithMany()
                        .HasForeignKey("CardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerGroupDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.CustomerGroup", "CustomerGroup")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerMerchantLocation", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerStateLocation", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.CustomerZipCodeLocation", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.DAMCard", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.DAMDriver", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.DAMVehicle", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.Driver", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.ExternalDatabaseDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.ExternalDatabase", "ExternalDatabase")
                        .WithMany()
                        .HasForeignKey("ExternalDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.ImportedTransaction", b =>
                {
                    b.HasOne("FleetControl.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FleetControl.Domain.LocationPricingLocationGroup", b =>
                {
                    b.HasOne("FleetControl.Domain.Location", "Location")
                        .WithMany("LocationPricingLocationGroups")
                        .HasForeignKey("LocationId");

                    b.HasOne("FleetControl.Domain.PricingLocationGroup", "PricingLocationGroup")
                        .WithMany()
                        .HasForeignKey("PricingLocationGroupId");
                });

            modelBuilder.Entity("FleetControl.Domain.SendTransactionsErrorLog", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("FleetControl.Domain.SiteProduct", b =>
                {
                    b.HasOne("FleetControl.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.SmallGallonTransaction", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("FleetControl.Domain.SyncCard", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("FleetControl.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("FleetControl.Domain.Transaction", b =>
                {
                    b.HasOne("FleetControl.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Customer", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("FleetControl.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionErrorDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.ImportedTransaction", "ImportedTransaction")
                        .WithMany()
                        .HasForeignKey("ImportedTransactionId");

                    b.HasOne("FleetControl.Domain.TransactionError", "TransactionError")
                        .WithMany()
                        .HasForeignKey("TransactionErrorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.TransactionExceptionDetail", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.TransactionException", "TransactionException")
                        .WithMany()
                        .HasForeignKey("TransactionExceptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FleetControl.Domain.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FleetControl.Domain.Vehicle", b =>
                {
                    b.HasOne("FleetControl.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
